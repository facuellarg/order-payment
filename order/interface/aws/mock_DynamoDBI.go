// Code generated by mockery v2.20.0. DO NOT EDIT.

package aws

import (
	context "context"

	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// MockDynamoDBI is an autogenerated mock type for the DynamoDBI type
type MockDynamoDBI struct {
	mock.Mock
}

type MockDynamoDBI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamoDBI) EXPECT() *MockDynamoDBI_Expecter {
	return &MockDynamoDBI_Expecter{mock: &_m.Mock}
}

// BatchExecuteStatement provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) BatchExecuteStatement(_a0 *dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.BatchExecuteStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchExecuteStatementInput) *dynamodb.BatchExecuteStatementOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchExecuteStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.BatchExecuteStatementInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_BatchExecuteStatement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchExecuteStatement'
type MockDynamoDBI_BatchExecuteStatement_Call struct {
	*mock.Call
}

// BatchExecuteStatement is a helper method to define mock.On call
//   - _a0 *dynamodb.BatchExecuteStatementInput
func (_e *MockDynamoDBI_Expecter) BatchExecuteStatement(_a0 interface{}) *MockDynamoDBI_BatchExecuteStatement_Call {
	return &MockDynamoDBI_BatchExecuteStatement_Call{Call: _e.mock.On("BatchExecuteStatement", _a0)}
}

func (_c *MockDynamoDBI_BatchExecuteStatement_Call) Run(run func(_a0 *dynamodb.BatchExecuteStatementInput)) *MockDynamoDBI_BatchExecuteStatement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.BatchExecuteStatementInput))
	})
	return _c
}

func (_c *MockDynamoDBI_BatchExecuteStatement_Call) Return(_a0 *dynamodb.BatchExecuteStatementOutput, _a1 error) *MockDynamoDBI_BatchExecuteStatement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchExecuteStatement_Call) RunAndReturn(run func(*dynamodb.BatchExecuteStatementInput) (*dynamodb.BatchExecuteStatementOutput, error)) *MockDynamoDBI_BatchExecuteStatement_Call {
	_c.Call.Return(run)
	return _c
}

// BatchExecuteStatementRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) BatchExecuteStatementRequest(_a0 *dynamodb.BatchExecuteStatementInput) (*request.Request, *dynamodb.BatchExecuteStatementOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.BatchExecuteStatementOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchExecuteStatementInput) (*request.Request, *dynamodb.BatchExecuteStatementOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchExecuteStatementInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.BatchExecuteStatementInput) *dynamodb.BatchExecuteStatementOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.BatchExecuteStatementOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_BatchExecuteStatementRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchExecuteStatementRequest'
type MockDynamoDBI_BatchExecuteStatementRequest_Call struct {
	*mock.Call
}

// BatchExecuteStatementRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.BatchExecuteStatementInput
func (_e *MockDynamoDBI_Expecter) BatchExecuteStatementRequest(_a0 interface{}) *MockDynamoDBI_BatchExecuteStatementRequest_Call {
	return &MockDynamoDBI_BatchExecuteStatementRequest_Call{Call: _e.mock.On("BatchExecuteStatementRequest", _a0)}
}

func (_c *MockDynamoDBI_BatchExecuteStatementRequest_Call) Run(run func(_a0 *dynamodb.BatchExecuteStatementInput)) *MockDynamoDBI_BatchExecuteStatementRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.BatchExecuteStatementInput))
	})
	return _c
}

func (_c *MockDynamoDBI_BatchExecuteStatementRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.BatchExecuteStatementOutput) *MockDynamoDBI_BatchExecuteStatementRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchExecuteStatementRequest_Call) RunAndReturn(run func(*dynamodb.BatchExecuteStatementInput) (*request.Request, *dynamodb.BatchExecuteStatementOutput)) *MockDynamoDBI_BatchExecuteStatementRequest_Call {
	_c.Call.Return(run)
	return _c
}

// BatchExecuteStatementWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) BatchExecuteStatementWithContext(_a0 context.Context, _a1 *dynamodb.BatchExecuteStatementInput, _a2 ...request.Option) (*dynamodb.BatchExecuteStatementOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.BatchExecuteStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchExecuteStatementInput, ...request.Option) (*dynamodb.BatchExecuteStatementOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchExecuteStatementInput, ...request.Option) *dynamodb.BatchExecuteStatementOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchExecuteStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.BatchExecuteStatementInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_BatchExecuteStatementWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchExecuteStatementWithContext'
type MockDynamoDBI_BatchExecuteStatementWithContext_Call struct {
	*mock.Call
}

// BatchExecuteStatementWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.BatchExecuteStatementInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) BatchExecuteStatementWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_BatchExecuteStatementWithContext_Call {
	return &MockDynamoDBI_BatchExecuteStatementWithContext_Call{Call: _e.mock.On("BatchExecuteStatementWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_BatchExecuteStatementWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.BatchExecuteStatementInput, _a2 ...request.Option)) *MockDynamoDBI_BatchExecuteStatementWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.BatchExecuteStatementInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_BatchExecuteStatementWithContext_Call) Return(_a0 *dynamodb.BatchExecuteStatementOutput, _a1 error) *MockDynamoDBI_BatchExecuteStatementWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchExecuteStatementWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.BatchExecuteStatementInput, ...request.Option) (*dynamodb.BatchExecuteStatementOutput, error)) *MockDynamoDBI_BatchExecuteStatementWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// BatchGetItem provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) BatchGetItem(_a0 *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.BatchGetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchGetItemInput) *dynamodb.BatchGetItemOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchGetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.BatchGetItemInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_BatchGetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetItem'
type MockDynamoDBI_BatchGetItem_Call struct {
	*mock.Call
}

// BatchGetItem is a helper method to define mock.On call
//   - _a0 *dynamodb.BatchGetItemInput
func (_e *MockDynamoDBI_Expecter) BatchGetItem(_a0 interface{}) *MockDynamoDBI_BatchGetItem_Call {
	return &MockDynamoDBI_BatchGetItem_Call{Call: _e.mock.On("BatchGetItem", _a0)}
}

func (_c *MockDynamoDBI_BatchGetItem_Call) Run(run func(_a0 *dynamodb.BatchGetItemInput)) *MockDynamoDBI_BatchGetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.BatchGetItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_BatchGetItem_Call) Return(_a0 *dynamodb.BatchGetItemOutput, _a1 error) *MockDynamoDBI_BatchGetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchGetItem_Call) RunAndReturn(run func(*dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error)) *MockDynamoDBI_BatchGetItem_Call {
	_c.Call.Return(run)
	return _c
}

// BatchGetItemPages provides a mock function with given fields: _a0, _a1
func (_m *MockDynamoDBI) BatchGetItemPages(_a0 *dynamodb.BatchGetItemInput, _a1 func(*dynamodb.BatchGetItemOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchGetItemInput, func(*dynamodb.BatchGetItemOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_BatchGetItemPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetItemPages'
type MockDynamoDBI_BatchGetItemPages_Call struct {
	*mock.Call
}

// BatchGetItemPages is a helper method to define mock.On call
//   - _a0 *dynamodb.BatchGetItemInput
//   - _a1 func(*dynamodb.BatchGetItemOutput , bool) bool
func (_e *MockDynamoDBI_Expecter) BatchGetItemPages(_a0 interface{}, _a1 interface{}) *MockDynamoDBI_BatchGetItemPages_Call {
	return &MockDynamoDBI_BatchGetItemPages_Call{Call: _e.mock.On("BatchGetItemPages", _a0, _a1)}
}

func (_c *MockDynamoDBI_BatchGetItemPages_Call) Run(run func(_a0 *dynamodb.BatchGetItemInput, _a1 func(*dynamodb.BatchGetItemOutput, bool) bool)) *MockDynamoDBI_BatchGetItemPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.BatchGetItemInput), args[1].(func(*dynamodb.BatchGetItemOutput, bool) bool))
	})
	return _c
}

func (_c *MockDynamoDBI_BatchGetItemPages_Call) Return(_a0 error) *MockDynamoDBI_BatchGetItemPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_BatchGetItemPages_Call) RunAndReturn(run func(*dynamodb.BatchGetItemInput, func(*dynamodb.BatchGetItemOutput, bool) bool) error) *MockDynamoDBI_BatchGetItemPages_Call {
	_c.Call.Return(run)
	return _c
}

// BatchGetItemPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockDynamoDBI) BatchGetItemPagesWithContext(_a0 context.Context, _a1 *dynamodb.BatchGetItemInput, _a2 func(*dynamodb.BatchGetItemOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchGetItemInput, func(*dynamodb.BatchGetItemOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_BatchGetItemPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetItemPagesWithContext'
type MockDynamoDBI_BatchGetItemPagesWithContext_Call struct {
	*mock.Call
}

// BatchGetItemPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.BatchGetItemInput
//   - _a2 func(*dynamodb.BatchGetItemOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockDynamoDBI_Expecter) BatchGetItemPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockDynamoDBI_BatchGetItemPagesWithContext_Call {
	return &MockDynamoDBI_BatchGetItemPagesWithContext_Call{Call: _e.mock.On("BatchGetItemPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockDynamoDBI_BatchGetItemPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.BatchGetItemInput, _a2 func(*dynamodb.BatchGetItemOutput, bool) bool, _a3 ...request.Option)) *MockDynamoDBI_BatchGetItemPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.BatchGetItemInput), args[2].(func(*dynamodb.BatchGetItemOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_BatchGetItemPagesWithContext_Call) Return(_a0 error) *MockDynamoDBI_BatchGetItemPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_BatchGetItemPagesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.BatchGetItemInput, func(*dynamodb.BatchGetItemOutput, bool) bool, ...request.Option) error) *MockDynamoDBI_BatchGetItemPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// BatchGetItemRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) BatchGetItemRequest(_a0 *dynamodb.BatchGetItemInput) (*request.Request, *dynamodb.BatchGetItemOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.BatchGetItemOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchGetItemInput) (*request.Request, *dynamodb.BatchGetItemOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchGetItemInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.BatchGetItemInput) *dynamodb.BatchGetItemOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.BatchGetItemOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_BatchGetItemRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetItemRequest'
type MockDynamoDBI_BatchGetItemRequest_Call struct {
	*mock.Call
}

// BatchGetItemRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.BatchGetItemInput
func (_e *MockDynamoDBI_Expecter) BatchGetItemRequest(_a0 interface{}) *MockDynamoDBI_BatchGetItemRequest_Call {
	return &MockDynamoDBI_BatchGetItemRequest_Call{Call: _e.mock.On("BatchGetItemRequest", _a0)}
}

func (_c *MockDynamoDBI_BatchGetItemRequest_Call) Run(run func(_a0 *dynamodb.BatchGetItemInput)) *MockDynamoDBI_BatchGetItemRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.BatchGetItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_BatchGetItemRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.BatchGetItemOutput) *MockDynamoDBI_BatchGetItemRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchGetItemRequest_Call) RunAndReturn(run func(*dynamodb.BatchGetItemInput) (*request.Request, *dynamodb.BatchGetItemOutput)) *MockDynamoDBI_BatchGetItemRequest_Call {
	_c.Call.Return(run)
	return _c
}

// BatchGetItemWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) BatchGetItemWithContext(_a0 context.Context, _a1 *dynamodb.BatchGetItemInput, _a2 ...request.Option) (*dynamodb.BatchGetItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.BatchGetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchGetItemInput, ...request.Option) (*dynamodb.BatchGetItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchGetItemInput, ...request.Option) *dynamodb.BatchGetItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchGetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.BatchGetItemInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_BatchGetItemWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetItemWithContext'
type MockDynamoDBI_BatchGetItemWithContext_Call struct {
	*mock.Call
}

// BatchGetItemWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.BatchGetItemInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) BatchGetItemWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_BatchGetItemWithContext_Call {
	return &MockDynamoDBI_BatchGetItemWithContext_Call{Call: _e.mock.On("BatchGetItemWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_BatchGetItemWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.BatchGetItemInput, _a2 ...request.Option)) *MockDynamoDBI_BatchGetItemWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.BatchGetItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_BatchGetItemWithContext_Call) Return(_a0 *dynamodb.BatchGetItemOutput, _a1 error) *MockDynamoDBI_BatchGetItemWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchGetItemWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.BatchGetItemInput, ...request.Option) (*dynamodb.BatchGetItemOutput, error)) *MockDynamoDBI_BatchGetItemWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// BatchWriteItem provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) BatchWriteItem(_a0 *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.BatchWriteItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchWriteItemInput) *dynamodb.BatchWriteItemOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchWriteItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.BatchWriteItemInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_BatchWriteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchWriteItem'
type MockDynamoDBI_BatchWriteItem_Call struct {
	*mock.Call
}

// BatchWriteItem is a helper method to define mock.On call
//   - _a0 *dynamodb.BatchWriteItemInput
func (_e *MockDynamoDBI_Expecter) BatchWriteItem(_a0 interface{}) *MockDynamoDBI_BatchWriteItem_Call {
	return &MockDynamoDBI_BatchWriteItem_Call{Call: _e.mock.On("BatchWriteItem", _a0)}
}

func (_c *MockDynamoDBI_BatchWriteItem_Call) Run(run func(_a0 *dynamodb.BatchWriteItemInput)) *MockDynamoDBI_BatchWriteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.BatchWriteItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_BatchWriteItem_Call) Return(_a0 *dynamodb.BatchWriteItemOutput, _a1 error) *MockDynamoDBI_BatchWriteItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchWriteItem_Call) RunAndReturn(run func(*dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error)) *MockDynamoDBI_BatchWriteItem_Call {
	_c.Call.Return(run)
	return _c
}

// BatchWriteItemRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) BatchWriteItemRequest(_a0 *dynamodb.BatchWriteItemInput) (*request.Request, *dynamodb.BatchWriteItemOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.BatchWriteItemOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchWriteItemInput) (*request.Request, *dynamodb.BatchWriteItemOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.BatchWriteItemInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.BatchWriteItemInput) *dynamodb.BatchWriteItemOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.BatchWriteItemOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_BatchWriteItemRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchWriteItemRequest'
type MockDynamoDBI_BatchWriteItemRequest_Call struct {
	*mock.Call
}

// BatchWriteItemRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.BatchWriteItemInput
func (_e *MockDynamoDBI_Expecter) BatchWriteItemRequest(_a0 interface{}) *MockDynamoDBI_BatchWriteItemRequest_Call {
	return &MockDynamoDBI_BatchWriteItemRequest_Call{Call: _e.mock.On("BatchWriteItemRequest", _a0)}
}

func (_c *MockDynamoDBI_BatchWriteItemRequest_Call) Run(run func(_a0 *dynamodb.BatchWriteItemInput)) *MockDynamoDBI_BatchWriteItemRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.BatchWriteItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_BatchWriteItemRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.BatchWriteItemOutput) *MockDynamoDBI_BatchWriteItemRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchWriteItemRequest_Call) RunAndReturn(run func(*dynamodb.BatchWriteItemInput) (*request.Request, *dynamodb.BatchWriteItemOutput)) *MockDynamoDBI_BatchWriteItemRequest_Call {
	_c.Call.Return(run)
	return _c
}

// BatchWriteItemWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) BatchWriteItemWithContext(_a0 context.Context, _a1 *dynamodb.BatchWriteItemInput, _a2 ...request.Option) (*dynamodb.BatchWriteItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.BatchWriteItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchWriteItemInput, ...request.Option) (*dynamodb.BatchWriteItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchWriteItemInput, ...request.Option) *dynamodb.BatchWriteItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchWriteItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.BatchWriteItemInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_BatchWriteItemWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchWriteItemWithContext'
type MockDynamoDBI_BatchWriteItemWithContext_Call struct {
	*mock.Call
}

// BatchWriteItemWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.BatchWriteItemInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) BatchWriteItemWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_BatchWriteItemWithContext_Call {
	return &MockDynamoDBI_BatchWriteItemWithContext_Call{Call: _e.mock.On("BatchWriteItemWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_BatchWriteItemWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.BatchWriteItemInput, _a2 ...request.Option)) *MockDynamoDBI_BatchWriteItemWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.BatchWriteItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_BatchWriteItemWithContext_Call) Return(_a0 *dynamodb.BatchWriteItemOutput, _a1 error) *MockDynamoDBI_BatchWriteItemWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_BatchWriteItemWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.BatchWriteItemInput, ...request.Option) (*dynamodb.BatchWriteItemOutput, error)) *MockDynamoDBI_BatchWriteItemWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackup provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) CreateBackup(_a0 *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.CreateBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateBackupInput) *dynamodb.CreateBackupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.CreateBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.CreateBackupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_CreateBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackup'
type MockDynamoDBI_CreateBackup_Call struct {
	*mock.Call
}

// CreateBackup is a helper method to define mock.On call
//   - _a0 *dynamodb.CreateBackupInput
func (_e *MockDynamoDBI_Expecter) CreateBackup(_a0 interface{}) *MockDynamoDBI_CreateBackup_Call {
	return &MockDynamoDBI_CreateBackup_Call{Call: _e.mock.On("CreateBackup", _a0)}
}

func (_c *MockDynamoDBI_CreateBackup_Call) Run(run func(_a0 *dynamodb.CreateBackupInput)) *MockDynamoDBI_CreateBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.CreateBackupInput))
	})
	return _c
}

func (_c *MockDynamoDBI_CreateBackup_Call) Return(_a0 *dynamodb.CreateBackupOutput, _a1 error) *MockDynamoDBI_CreateBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateBackup_Call) RunAndReturn(run func(*dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error)) *MockDynamoDBI_CreateBackup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) CreateBackupRequest(_a0 *dynamodb.CreateBackupInput) (*request.Request, *dynamodb.CreateBackupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.CreateBackupOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateBackupInput) (*request.Request, *dynamodb.CreateBackupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateBackupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.CreateBackupInput) *dynamodb.CreateBackupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.CreateBackupOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_CreateBackupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupRequest'
type MockDynamoDBI_CreateBackupRequest_Call struct {
	*mock.Call
}

// CreateBackupRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.CreateBackupInput
func (_e *MockDynamoDBI_Expecter) CreateBackupRequest(_a0 interface{}) *MockDynamoDBI_CreateBackupRequest_Call {
	return &MockDynamoDBI_CreateBackupRequest_Call{Call: _e.mock.On("CreateBackupRequest", _a0)}
}

func (_c *MockDynamoDBI_CreateBackupRequest_Call) Run(run func(_a0 *dynamodb.CreateBackupInput)) *MockDynamoDBI_CreateBackupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.CreateBackupInput))
	})
	return _c
}

func (_c *MockDynamoDBI_CreateBackupRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.CreateBackupOutput) *MockDynamoDBI_CreateBackupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateBackupRequest_Call) RunAndReturn(run func(*dynamodb.CreateBackupInput) (*request.Request, *dynamodb.CreateBackupOutput)) *MockDynamoDBI_CreateBackupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBackupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) CreateBackupWithContext(_a0 context.Context, _a1 *dynamodb.CreateBackupInput, _a2 ...request.Option) (*dynamodb.CreateBackupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.CreateBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.CreateBackupInput, ...request.Option) (*dynamodb.CreateBackupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.CreateBackupInput, ...request.Option) *dynamodb.CreateBackupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.CreateBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.CreateBackupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_CreateBackupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBackupWithContext'
type MockDynamoDBI_CreateBackupWithContext_Call struct {
	*mock.Call
}

// CreateBackupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.CreateBackupInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) CreateBackupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_CreateBackupWithContext_Call {
	return &MockDynamoDBI_CreateBackupWithContext_Call{Call: _e.mock.On("CreateBackupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_CreateBackupWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.CreateBackupInput, _a2 ...request.Option)) *MockDynamoDBI_CreateBackupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.CreateBackupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_CreateBackupWithContext_Call) Return(_a0 *dynamodb.CreateBackupOutput, _a1 error) *MockDynamoDBI_CreateBackupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateBackupWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.CreateBackupInput, ...request.Option) (*dynamodb.CreateBackupOutput, error)) *MockDynamoDBI_CreateBackupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGlobalTable provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) CreateGlobalTable(_a0 *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.CreateGlobalTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateGlobalTableInput) *dynamodb.CreateGlobalTableOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.CreateGlobalTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.CreateGlobalTableInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_CreateGlobalTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGlobalTable'
type MockDynamoDBI_CreateGlobalTable_Call struct {
	*mock.Call
}

// CreateGlobalTable is a helper method to define mock.On call
//   - _a0 *dynamodb.CreateGlobalTableInput
func (_e *MockDynamoDBI_Expecter) CreateGlobalTable(_a0 interface{}) *MockDynamoDBI_CreateGlobalTable_Call {
	return &MockDynamoDBI_CreateGlobalTable_Call{Call: _e.mock.On("CreateGlobalTable", _a0)}
}

func (_c *MockDynamoDBI_CreateGlobalTable_Call) Run(run func(_a0 *dynamodb.CreateGlobalTableInput)) *MockDynamoDBI_CreateGlobalTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.CreateGlobalTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_CreateGlobalTable_Call) Return(_a0 *dynamodb.CreateGlobalTableOutput, _a1 error) *MockDynamoDBI_CreateGlobalTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateGlobalTable_Call) RunAndReturn(run func(*dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error)) *MockDynamoDBI_CreateGlobalTable_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGlobalTableRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) CreateGlobalTableRequest(_a0 *dynamodb.CreateGlobalTableInput) (*request.Request, *dynamodb.CreateGlobalTableOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.CreateGlobalTableOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateGlobalTableInput) (*request.Request, *dynamodb.CreateGlobalTableOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateGlobalTableInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.CreateGlobalTableInput) *dynamodb.CreateGlobalTableOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.CreateGlobalTableOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_CreateGlobalTableRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGlobalTableRequest'
type MockDynamoDBI_CreateGlobalTableRequest_Call struct {
	*mock.Call
}

// CreateGlobalTableRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.CreateGlobalTableInput
func (_e *MockDynamoDBI_Expecter) CreateGlobalTableRequest(_a0 interface{}) *MockDynamoDBI_CreateGlobalTableRequest_Call {
	return &MockDynamoDBI_CreateGlobalTableRequest_Call{Call: _e.mock.On("CreateGlobalTableRequest", _a0)}
}

func (_c *MockDynamoDBI_CreateGlobalTableRequest_Call) Run(run func(_a0 *dynamodb.CreateGlobalTableInput)) *MockDynamoDBI_CreateGlobalTableRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.CreateGlobalTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_CreateGlobalTableRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.CreateGlobalTableOutput) *MockDynamoDBI_CreateGlobalTableRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateGlobalTableRequest_Call) RunAndReturn(run func(*dynamodb.CreateGlobalTableInput) (*request.Request, *dynamodb.CreateGlobalTableOutput)) *MockDynamoDBI_CreateGlobalTableRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGlobalTableWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) CreateGlobalTableWithContext(_a0 context.Context, _a1 *dynamodb.CreateGlobalTableInput, _a2 ...request.Option) (*dynamodb.CreateGlobalTableOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.CreateGlobalTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.CreateGlobalTableInput, ...request.Option) (*dynamodb.CreateGlobalTableOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.CreateGlobalTableInput, ...request.Option) *dynamodb.CreateGlobalTableOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.CreateGlobalTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.CreateGlobalTableInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_CreateGlobalTableWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGlobalTableWithContext'
type MockDynamoDBI_CreateGlobalTableWithContext_Call struct {
	*mock.Call
}

// CreateGlobalTableWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.CreateGlobalTableInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) CreateGlobalTableWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_CreateGlobalTableWithContext_Call {
	return &MockDynamoDBI_CreateGlobalTableWithContext_Call{Call: _e.mock.On("CreateGlobalTableWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_CreateGlobalTableWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.CreateGlobalTableInput, _a2 ...request.Option)) *MockDynamoDBI_CreateGlobalTableWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.CreateGlobalTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_CreateGlobalTableWithContext_Call) Return(_a0 *dynamodb.CreateGlobalTableOutput, _a1 error) *MockDynamoDBI_CreateGlobalTableWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateGlobalTableWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.CreateGlobalTableInput, ...request.Option) (*dynamodb.CreateGlobalTableOutput, error)) *MockDynamoDBI_CreateGlobalTableWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTable provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) CreateTable(_a0 *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.CreateTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateTableInput) *dynamodb.CreateTableOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.CreateTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.CreateTableInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_CreateTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTable'
type MockDynamoDBI_CreateTable_Call struct {
	*mock.Call
}

// CreateTable is a helper method to define mock.On call
//   - _a0 *dynamodb.CreateTableInput
func (_e *MockDynamoDBI_Expecter) CreateTable(_a0 interface{}) *MockDynamoDBI_CreateTable_Call {
	return &MockDynamoDBI_CreateTable_Call{Call: _e.mock.On("CreateTable", _a0)}
}

func (_c *MockDynamoDBI_CreateTable_Call) Run(run func(_a0 *dynamodb.CreateTableInput)) *MockDynamoDBI_CreateTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.CreateTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_CreateTable_Call) Return(_a0 *dynamodb.CreateTableOutput, _a1 error) *MockDynamoDBI_CreateTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateTable_Call) RunAndReturn(run func(*dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error)) *MockDynamoDBI_CreateTable_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTableRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) CreateTableRequest(_a0 *dynamodb.CreateTableInput) (*request.Request, *dynamodb.CreateTableOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.CreateTableOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateTableInput) (*request.Request, *dynamodb.CreateTableOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.CreateTableInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.CreateTableInput) *dynamodb.CreateTableOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.CreateTableOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_CreateTableRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTableRequest'
type MockDynamoDBI_CreateTableRequest_Call struct {
	*mock.Call
}

// CreateTableRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.CreateTableInput
func (_e *MockDynamoDBI_Expecter) CreateTableRequest(_a0 interface{}) *MockDynamoDBI_CreateTableRequest_Call {
	return &MockDynamoDBI_CreateTableRequest_Call{Call: _e.mock.On("CreateTableRequest", _a0)}
}

func (_c *MockDynamoDBI_CreateTableRequest_Call) Run(run func(_a0 *dynamodb.CreateTableInput)) *MockDynamoDBI_CreateTableRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.CreateTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_CreateTableRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.CreateTableOutput) *MockDynamoDBI_CreateTableRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateTableRequest_Call) RunAndReturn(run func(*dynamodb.CreateTableInput) (*request.Request, *dynamodb.CreateTableOutput)) *MockDynamoDBI_CreateTableRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTableWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) CreateTableWithContext(_a0 context.Context, _a1 *dynamodb.CreateTableInput, _a2 ...request.Option) (*dynamodb.CreateTableOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.CreateTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.CreateTableInput, ...request.Option) (*dynamodb.CreateTableOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.CreateTableInput, ...request.Option) *dynamodb.CreateTableOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.CreateTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.CreateTableInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_CreateTableWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTableWithContext'
type MockDynamoDBI_CreateTableWithContext_Call struct {
	*mock.Call
}

// CreateTableWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.CreateTableInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) CreateTableWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_CreateTableWithContext_Call {
	return &MockDynamoDBI_CreateTableWithContext_Call{Call: _e.mock.On("CreateTableWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_CreateTableWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.CreateTableInput, _a2 ...request.Option)) *MockDynamoDBI_CreateTableWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.CreateTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_CreateTableWithContext_Call) Return(_a0 *dynamodb.CreateTableOutput, _a1 error) *MockDynamoDBI_CreateTableWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_CreateTableWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.CreateTableInput, ...request.Option) (*dynamodb.CreateTableOutput, error)) *MockDynamoDBI_CreateTableWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackup provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DeleteBackup(_a0 *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DeleteBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteBackupInput) *dynamodb.DeleteBackupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DeleteBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DeleteBackupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DeleteBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackup'
type MockDynamoDBI_DeleteBackup_Call struct {
	*mock.Call
}

// DeleteBackup is a helper method to define mock.On call
//   - _a0 *dynamodb.DeleteBackupInput
func (_e *MockDynamoDBI_Expecter) DeleteBackup(_a0 interface{}) *MockDynamoDBI_DeleteBackup_Call {
	return &MockDynamoDBI_DeleteBackup_Call{Call: _e.mock.On("DeleteBackup", _a0)}
}

func (_c *MockDynamoDBI_DeleteBackup_Call) Run(run func(_a0 *dynamodb.DeleteBackupInput)) *MockDynamoDBI_DeleteBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DeleteBackupInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteBackup_Call) Return(_a0 *dynamodb.DeleteBackupOutput, _a1 error) *MockDynamoDBI_DeleteBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteBackup_Call) RunAndReturn(run func(*dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error)) *MockDynamoDBI_DeleteBackup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackupRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DeleteBackupRequest(_a0 *dynamodb.DeleteBackupInput) (*request.Request, *dynamodb.DeleteBackupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DeleteBackupOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteBackupInput) (*request.Request, *dynamodb.DeleteBackupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteBackupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DeleteBackupInput) *dynamodb.DeleteBackupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DeleteBackupOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DeleteBackupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackupRequest'
type MockDynamoDBI_DeleteBackupRequest_Call struct {
	*mock.Call
}

// DeleteBackupRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DeleteBackupInput
func (_e *MockDynamoDBI_Expecter) DeleteBackupRequest(_a0 interface{}) *MockDynamoDBI_DeleteBackupRequest_Call {
	return &MockDynamoDBI_DeleteBackupRequest_Call{Call: _e.mock.On("DeleteBackupRequest", _a0)}
}

func (_c *MockDynamoDBI_DeleteBackupRequest_Call) Run(run func(_a0 *dynamodb.DeleteBackupInput)) *MockDynamoDBI_DeleteBackupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DeleteBackupInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteBackupRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DeleteBackupOutput) *MockDynamoDBI_DeleteBackupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteBackupRequest_Call) RunAndReturn(run func(*dynamodb.DeleteBackupInput) (*request.Request, *dynamodb.DeleteBackupOutput)) *MockDynamoDBI_DeleteBackupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DeleteBackupWithContext(_a0 context.Context, _a1 *dynamodb.DeleteBackupInput, _a2 ...request.Option) (*dynamodb.DeleteBackupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DeleteBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DeleteBackupInput, ...request.Option) (*dynamodb.DeleteBackupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DeleteBackupInput, ...request.Option) *dynamodb.DeleteBackupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DeleteBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DeleteBackupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DeleteBackupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackupWithContext'
type MockDynamoDBI_DeleteBackupWithContext_Call struct {
	*mock.Call
}

// DeleteBackupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DeleteBackupInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DeleteBackupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DeleteBackupWithContext_Call {
	return &MockDynamoDBI_DeleteBackupWithContext_Call{Call: _e.mock.On("DeleteBackupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DeleteBackupWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DeleteBackupInput, _a2 ...request.Option)) *MockDynamoDBI_DeleteBackupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DeleteBackupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteBackupWithContext_Call) Return(_a0 *dynamodb.DeleteBackupOutput, _a1 error) *MockDynamoDBI_DeleteBackupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteBackupWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DeleteBackupInput, ...request.Option) (*dynamodb.DeleteBackupOutput, error)) *MockDynamoDBI_DeleteBackupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItem provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DeleteItem(_a0 *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DeleteItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteItemInput) *dynamodb.DeleteItemOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DeleteItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DeleteItemInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DeleteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItem'
type MockDynamoDBI_DeleteItem_Call struct {
	*mock.Call
}

// DeleteItem is a helper method to define mock.On call
//   - _a0 *dynamodb.DeleteItemInput
func (_e *MockDynamoDBI_Expecter) DeleteItem(_a0 interface{}) *MockDynamoDBI_DeleteItem_Call {
	return &MockDynamoDBI_DeleteItem_Call{Call: _e.mock.On("DeleteItem", _a0)}
}

func (_c *MockDynamoDBI_DeleteItem_Call) Run(run func(_a0 *dynamodb.DeleteItemInput)) *MockDynamoDBI_DeleteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DeleteItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteItem_Call) Return(_a0 *dynamodb.DeleteItemOutput, _a1 error) *MockDynamoDBI_DeleteItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteItem_Call) RunAndReturn(run func(*dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error)) *MockDynamoDBI_DeleteItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItemRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DeleteItemRequest(_a0 *dynamodb.DeleteItemInput) (*request.Request, *dynamodb.DeleteItemOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DeleteItemOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteItemInput) (*request.Request, *dynamodb.DeleteItemOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteItemInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DeleteItemInput) *dynamodb.DeleteItemOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DeleteItemOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DeleteItemRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItemRequest'
type MockDynamoDBI_DeleteItemRequest_Call struct {
	*mock.Call
}

// DeleteItemRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DeleteItemInput
func (_e *MockDynamoDBI_Expecter) DeleteItemRequest(_a0 interface{}) *MockDynamoDBI_DeleteItemRequest_Call {
	return &MockDynamoDBI_DeleteItemRequest_Call{Call: _e.mock.On("DeleteItemRequest", _a0)}
}

func (_c *MockDynamoDBI_DeleteItemRequest_Call) Run(run func(_a0 *dynamodb.DeleteItemInput)) *MockDynamoDBI_DeleteItemRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DeleteItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteItemRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DeleteItemOutput) *MockDynamoDBI_DeleteItemRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteItemRequest_Call) RunAndReturn(run func(*dynamodb.DeleteItemInput) (*request.Request, *dynamodb.DeleteItemOutput)) *MockDynamoDBI_DeleteItemRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItemWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DeleteItemWithContext(_a0 context.Context, _a1 *dynamodb.DeleteItemInput, _a2 ...request.Option) (*dynamodb.DeleteItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DeleteItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DeleteItemInput, ...request.Option) (*dynamodb.DeleteItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DeleteItemInput, ...request.Option) *dynamodb.DeleteItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DeleteItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DeleteItemInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DeleteItemWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItemWithContext'
type MockDynamoDBI_DeleteItemWithContext_Call struct {
	*mock.Call
}

// DeleteItemWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DeleteItemInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DeleteItemWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DeleteItemWithContext_Call {
	return &MockDynamoDBI_DeleteItemWithContext_Call{Call: _e.mock.On("DeleteItemWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DeleteItemWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DeleteItemInput, _a2 ...request.Option)) *MockDynamoDBI_DeleteItemWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DeleteItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteItemWithContext_Call) Return(_a0 *dynamodb.DeleteItemOutput, _a1 error) *MockDynamoDBI_DeleteItemWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteItemWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DeleteItemInput, ...request.Option) (*dynamodb.DeleteItemOutput, error)) *MockDynamoDBI_DeleteItemWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTable provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DeleteTable(_a0 *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DeleteTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteTableInput) *dynamodb.DeleteTableOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DeleteTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DeleteTableInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DeleteTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTable'
type MockDynamoDBI_DeleteTable_Call struct {
	*mock.Call
}

// DeleteTable is a helper method to define mock.On call
//   - _a0 *dynamodb.DeleteTableInput
func (_e *MockDynamoDBI_Expecter) DeleteTable(_a0 interface{}) *MockDynamoDBI_DeleteTable_Call {
	return &MockDynamoDBI_DeleteTable_Call{Call: _e.mock.On("DeleteTable", _a0)}
}

func (_c *MockDynamoDBI_DeleteTable_Call) Run(run func(_a0 *dynamodb.DeleteTableInput)) *MockDynamoDBI_DeleteTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DeleteTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteTable_Call) Return(_a0 *dynamodb.DeleteTableOutput, _a1 error) *MockDynamoDBI_DeleteTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteTable_Call) RunAndReturn(run func(*dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error)) *MockDynamoDBI_DeleteTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTableRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DeleteTableRequest(_a0 *dynamodb.DeleteTableInput) (*request.Request, *dynamodb.DeleteTableOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DeleteTableOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteTableInput) (*request.Request, *dynamodb.DeleteTableOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteTableInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DeleteTableInput) *dynamodb.DeleteTableOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DeleteTableOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DeleteTableRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTableRequest'
type MockDynamoDBI_DeleteTableRequest_Call struct {
	*mock.Call
}

// DeleteTableRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DeleteTableInput
func (_e *MockDynamoDBI_Expecter) DeleteTableRequest(_a0 interface{}) *MockDynamoDBI_DeleteTableRequest_Call {
	return &MockDynamoDBI_DeleteTableRequest_Call{Call: _e.mock.On("DeleteTableRequest", _a0)}
}

func (_c *MockDynamoDBI_DeleteTableRequest_Call) Run(run func(_a0 *dynamodb.DeleteTableInput)) *MockDynamoDBI_DeleteTableRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DeleteTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteTableRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DeleteTableOutput) *MockDynamoDBI_DeleteTableRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteTableRequest_Call) RunAndReturn(run func(*dynamodb.DeleteTableInput) (*request.Request, *dynamodb.DeleteTableOutput)) *MockDynamoDBI_DeleteTableRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTableWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DeleteTableWithContext(_a0 context.Context, _a1 *dynamodb.DeleteTableInput, _a2 ...request.Option) (*dynamodb.DeleteTableOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DeleteTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DeleteTableInput, ...request.Option) (*dynamodb.DeleteTableOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DeleteTableInput, ...request.Option) *dynamodb.DeleteTableOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DeleteTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DeleteTableInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DeleteTableWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTableWithContext'
type MockDynamoDBI_DeleteTableWithContext_Call struct {
	*mock.Call
}

// DeleteTableWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DeleteTableInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DeleteTableWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DeleteTableWithContext_Call {
	return &MockDynamoDBI_DeleteTableWithContext_Call{Call: _e.mock.On("DeleteTableWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DeleteTableWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DeleteTableInput, _a2 ...request.Option)) *MockDynamoDBI_DeleteTableWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DeleteTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DeleteTableWithContext_Call) Return(_a0 *dynamodb.DeleteTableOutput, _a1 error) *MockDynamoDBI_DeleteTableWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DeleteTableWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DeleteTableInput, ...request.Option) (*dynamodb.DeleteTableOutput, error)) *MockDynamoDBI_DeleteTableWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeBackup provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeBackup(_a0 *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeBackupInput) *dynamodb.DescribeBackupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeBackupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeBackup'
type MockDynamoDBI_DescribeBackup_Call struct {
	*mock.Call
}

// DescribeBackup is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeBackupInput
func (_e *MockDynamoDBI_Expecter) DescribeBackup(_a0 interface{}) *MockDynamoDBI_DescribeBackup_Call {
	return &MockDynamoDBI_DescribeBackup_Call{Call: _e.mock.On("DescribeBackup", _a0)}
}

func (_c *MockDynamoDBI_DescribeBackup_Call) Run(run func(_a0 *dynamodb.DescribeBackupInput)) *MockDynamoDBI_DescribeBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeBackupInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeBackup_Call) Return(_a0 *dynamodb.DescribeBackupOutput, _a1 error) *MockDynamoDBI_DescribeBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeBackup_Call) RunAndReturn(run func(*dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error)) *MockDynamoDBI_DescribeBackup_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeBackupRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeBackupRequest(_a0 *dynamodb.DescribeBackupInput) (*request.Request, *dynamodb.DescribeBackupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeBackupOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeBackupInput) (*request.Request, *dynamodb.DescribeBackupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeBackupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeBackupInput) *dynamodb.DescribeBackupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeBackupOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeBackupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeBackupRequest'
type MockDynamoDBI_DescribeBackupRequest_Call struct {
	*mock.Call
}

// DescribeBackupRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeBackupInput
func (_e *MockDynamoDBI_Expecter) DescribeBackupRequest(_a0 interface{}) *MockDynamoDBI_DescribeBackupRequest_Call {
	return &MockDynamoDBI_DescribeBackupRequest_Call{Call: _e.mock.On("DescribeBackupRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeBackupRequest_Call) Run(run func(_a0 *dynamodb.DescribeBackupInput)) *MockDynamoDBI_DescribeBackupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeBackupInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeBackupRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeBackupOutput) *MockDynamoDBI_DescribeBackupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeBackupRequest_Call) RunAndReturn(run func(*dynamodb.DescribeBackupInput) (*request.Request, *dynamodb.DescribeBackupOutput)) *MockDynamoDBI_DescribeBackupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeBackupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeBackupWithContext(_a0 context.Context, _a1 *dynamodb.DescribeBackupInput, _a2 ...request.Option) (*dynamodb.DescribeBackupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeBackupInput, ...request.Option) (*dynamodb.DescribeBackupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeBackupInput, ...request.Option) *dynamodb.DescribeBackupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeBackupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeBackupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeBackupWithContext'
type MockDynamoDBI_DescribeBackupWithContext_Call struct {
	*mock.Call
}

// DescribeBackupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeBackupInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeBackupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeBackupWithContext_Call {
	return &MockDynamoDBI_DescribeBackupWithContext_Call{Call: _e.mock.On("DescribeBackupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeBackupWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeBackupInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeBackupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeBackupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeBackupWithContext_Call) Return(_a0 *dynamodb.DescribeBackupOutput, _a1 error) *MockDynamoDBI_DescribeBackupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeBackupWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeBackupInput, ...request.Option) (*dynamodb.DescribeBackupOutput, error)) *MockDynamoDBI_DescribeBackupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeContinuousBackups provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeContinuousBackups(_a0 *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeContinuousBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContinuousBackupsInput) *dynamodb.DescribeContinuousBackupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeContinuousBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeContinuousBackupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeContinuousBackups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeContinuousBackups'
type MockDynamoDBI_DescribeContinuousBackups_Call struct {
	*mock.Call
}

// DescribeContinuousBackups is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeContinuousBackupsInput
func (_e *MockDynamoDBI_Expecter) DescribeContinuousBackups(_a0 interface{}) *MockDynamoDBI_DescribeContinuousBackups_Call {
	return &MockDynamoDBI_DescribeContinuousBackups_Call{Call: _e.mock.On("DescribeContinuousBackups", _a0)}
}

func (_c *MockDynamoDBI_DescribeContinuousBackups_Call) Run(run func(_a0 *dynamodb.DescribeContinuousBackupsInput)) *MockDynamoDBI_DescribeContinuousBackups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeContinuousBackupsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeContinuousBackups_Call) Return(_a0 *dynamodb.DescribeContinuousBackupsOutput, _a1 error) *MockDynamoDBI_DescribeContinuousBackups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeContinuousBackups_Call) RunAndReturn(run func(*dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error)) *MockDynamoDBI_DescribeContinuousBackups_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeContinuousBackupsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeContinuousBackupsRequest(_a0 *dynamodb.DescribeContinuousBackupsInput) (*request.Request, *dynamodb.DescribeContinuousBackupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeContinuousBackupsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContinuousBackupsInput) (*request.Request, *dynamodb.DescribeContinuousBackupsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContinuousBackupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeContinuousBackupsInput) *dynamodb.DescribeContinuousBackupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeContinuousBackupsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeContinuousBackupsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeContinuousBackupsRequest'
type MockDynamoDBI_DescribeContinuousBackupsRequest_Call struct {
	*mock.Call
}

// DescribeContinuousBackupsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeContinuousBackupsInput
func (_e *MockDynamoDBI_Expecter) DescribeContinuousBackupsRequest(_a0 interface{}) *MockDynamoDBI_DescribeContinuousBackupsRequest_Call {
	return &MockDynamoDBI_DescribeContinuousBackupsRequest_Call{Call: _e.mock.On("DescribeContinuousBackupsRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeContinuousBackupsRequest_Call) Run(run func(_a0 *dynamodb.DescribeContinuousBackupsInput)) *MockDynamoDBI_DescribeContinuousBackupsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeContinuousBackupsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeContinuousBackupsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeContinuousBackupsOutput) *MockDynamoDBI_DescribeContinuousBackupsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeContinuousBackupsRequest_Call) RunAndReturn(run func(*dynamodb.DescribeContinuousBackupsInput) (*request.Request, *dynamodb.DescribeContinuousBackupsOutput)) *MockDynamoDBI_DescribeContinuousBackupsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeContinuousBackupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeContinuousBackupsWithContext(_a0 context.Context, _a1 *dynamodb.DescribeContinuousBackupsInput, _a2 ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeContinuousBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeContinuousBackupsInput, ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeContinuousBackupsInput, ...request.Option) *dynamodb.DescribeContinuousBackupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeContinuousBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeContinuousBackupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeContinuousBackupsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeContinuousBackupsWithContext'
type MockDynamoDBI_DescribeContinuousBackupsWithContext_Call struct {
	*mock.Call
}

// DescribeContinuousBackupsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeContinuousBackupsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeContinuousBackupsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeContinuousBackupsWithContext_Call {
	return &MockDynamoDBI_DescribeContinuousBackupsWithContext_Call{Call: _e.mock.On("DescribeContinuousBackupsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeContinuousBackupsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeContinuousBackupsInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeContinuousBackupsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeContinuousBackupsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeContinuousBackupsWithContext_Call) Return(_a0 *dynamodb.DescribeContinuousBackupsOutput, _a1 error) *MockDynamoDBI_DescribeContinuousBackupsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeContinuousBackupsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeContinuousBackupsInput, ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error)) *MockDynamoDBI_DescribeContinuousBackupsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeContributorInsights provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeContributorInsights(_a0 *dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeContributorInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContributorInsightsInput) *dynamodb.DescribeContributorInsightsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeContributorInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeContributorInsightsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeContributorInsights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeContributorInsights'
type MockDynamoDBI_DescribeContributorInsights_Call struct {
	*mock.Call
}

// DescribeContributorInsights is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeContributorInsightsInput
func (_e *MockDynamoDBI_Expecter) DescribeContributorInsights(_a0 interface{}) *MockDynamoDBI_DescribeContributorInsights_Call {
	return &MockDynamoDBI_DescribeContributorInsights_Call{Call: _e.mock.On("DescribeContributorInsights", _a0)}
}

func (_c *MockDynamoDBI_DescribeContributorInsights_Call) Run(run func(_a0 *dynamodb.DescribeContributorInsightsInput)) *MockDynamoDBI_DescribeContributorInsights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeContributorInsightsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeContributorInsights_Call) Return(_a0 *dynamodb.DescribeContributorInsightsOutput, _a1 error) *MockDynamoDBI_DescribeContributorInsights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeContributorInsights_Call) RunAndReturn(run func(*dynamodb.DescribeContributorInsightsInput) (*dynamodb.DescribeContributorInsightsOutput, error)) *MockDynamoDBI_DescribeContributorInsights_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeContributorInsightsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeContributorInsightsRequest(_a0 *dynamodb.DescribeContributorInsightsInput) (*request.Request, *dynamodb.DescribeContributorInsightsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeContributorInsightsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContributorInsightsInput) (*request.Request, *dynamodb.DescribeContributorInsightsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeContributorInsightsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeContributorInsightsInput) *dynamodb.DescribeContributorInsightsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeContributorInsightsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeContributorInsightsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeContributorInsightsRequest'
type MockDynamoDBI_DescribeContributorInsightsRequest_Call struct {
	*mock.Call
}

// DescribeContributorInsightsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeContributorInsightsInput
func (_e *MockDynamoDBI_Expecter) DescribeContributorInsightsRequest(_a0 interface{}) *MockDynamoDBI_DescribeContributorInsightsRequest_Call {
	return &MockDynamoDBI_DescribeContributorInsightsRequest_Call{Call: _e.mock.On("DescribeContributorInsightsRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeContributorInsightsRequest_Call) Run(run func(_a0 *dynamodb.DescribeContributorInsightsInput)) *MockDynamoDBI_DescribeContributorInsightsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeContributorInsightsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeContributorInsightsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeContributorInsightsOutput) *MockDynamoDBI_DescribeContributorInsightsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeContributorInsightsRequest_Call) RunAndReturn(run func(*dynamodb.DescribeContributorInsightsInput) (*request.Request, *dynamodb.DescribeContributorInsightsOutput)) *MockDynamoDBI_DescribeContributorInsightsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeContributorInsightsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeContributorInsightsWithContext(_a0 context.Context, _a1 *dynamodb.DescribeContributorInsightsInput, _a2 ...request.Option) (*dynamodb.DescribeContributorInsightsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeContributorInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeContributorInsightsInput, ...request.Option) (*dynamodb.DescribeContributorInsightsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeContributorInsightsInput, ...request.Option) *dynamodb.DescribeContributorInsightsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeContributorInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeContributorInsightsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeContributorInsightsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeContributorInsightsWithContext'
type MockDynamoDBI_DescribeContributorInsightsWithContext_Call struct {
	*mock.Call
}

// DescribeContributorInsightsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeContributorInsightsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeContributorInsightsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeContributorInsightsWithContext_Call {
	return &MockDynamoDBI_DescribeContributorInsightsWithContext_Call{Call: _e.mock.On("DescribeContributorInsightsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeContributorInsightsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeContributorInsightsInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeContributorInsightsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeContributorInsightsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeContributorInsightsWithContext_Call) Return(_a0 *dynamodb.DescribeContributorInsightsOutput, _a1 error) *MockDynamoDBI_DescribeContributorInsightsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeContributorInsightsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeContributorInsightsInput, ...request.Option) (*dynamodb.DescribeContributorInsightsOutput, error)) *MockDynamoDBI_DescribeContributorInsightsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeEndpoints provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeEndpoints(_a0 *dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeEndpointsInput) *dynamodb.DescribeEndpointsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeEndpointsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeEndpoints'
type MockDynamoDBI_DescribeEndpoints_Call struct {
	*mock.Call
}

// DescribeEndpoints is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeEndpointsInput
func (_e *MockDynamoDBI_Expecter) DescribeEndpoints(_a0 interface{}) *MockDynamoDBI_DescribeEndpoints_Call {
	return &MockDynamoDBI_DescribeEndpoints_Call{Call: _e.mock.On("DescribeEndpoints", _a0)}
}

func (_c *MockDynamoDBI_DescribeEndpoints_Call) Run(run func(_a0 *dynamodb.DescribeEndpointsInput)) *MockDynamoDBI_DescribeEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeEndpointsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeEndpoints_Call) Return(_a0 *dynamodb.DescribeEndpointsOutput, _a1 error) *MockDynamoDBI_DescribeEndpoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeEndpoints_Call) RunAndReturn(run func(*dynamodb.DescribeEndpointsInput) (*dynamodb.DescribeEndpointsOutput, error)) *MockDynamoDBI_DescribeEndpoints_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeEndpointsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeEndpointsRequest(_a0 *dynamodb.DescribeEndpointsInput) (*request.Request, *dynamodb.DescribeEndpointsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeEndpointsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeEndpointsInput) (*request.Request, *dynamodb.DescribeEndpointsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeEndpointsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeEndpointsInput) *dynamodb.DescribeEndpointsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeEndpointsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeEndpointsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeEndpointsRequest'
type MockDynamoDBI_DescribeEndpointsRequest_Call struct {
	*mock.Call
}

// DescribeEndpointsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeEndpointsInput
func (_e *MockDynamoDBI_Expecter) DescribeEndpointsRequest(_a0 interface{}) *MockDynamoDBI_DescribeEndpointsRequest_Call {
	return &MockDynamoDBI_DescribeEndpointsRequest_Call{Call: _e.mock.On("DescribeEndpointsRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeEndpointsRequest_Call) Run(run func(_a0 *dynamodb.DescribeEndpointsInput)) *MockDynamoDBI_DescribeEndpointsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeEndpointsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeEndpointsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeEndpointsOutput) *MockDynamoDBI_DescribeEndpointsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeEndpointsRequest_Call) RunAndReturn(run func(*dynamodb.DescribeEndpointsInput) (*request.Request, *dynamodb.DescribeEndpointsOutput)) *MockDynamoDBI_DescribeEndpointsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeEndpointsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeEndpointsWithContext(_a0 context.Context, _a1 *dynamodb.DescribeEndpointsInput, _a2 ...request.Option) (*dynamodb.DescribeEndpointsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeEndpointsInput, ...request.Option) (*dynamodb.DescribeEndpointsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeEndpointsInput, ...request.Option) *dynamodb.DescribeEndpointsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeEndpointsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeEndpointsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeEndpointsWithContext'
type MockDynamoDBI_DescribeEndpointsWithContext_Call struct {
	*mock.Call
}

// DescribeEndpointsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeEndpointsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeEndpointsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeEndpointsWithContext_Call {
	return &MockDynamoDBI_DescribeEndpointsWithContext_Call{Call: _e.mock.On("DescribeEndpointsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeEndpointsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeEndpointsInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeEndpointsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeEndpointsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeEndpointsWithContext_Call) Return(_a0 *dynamodb.DescribeEndpointsOutput, _a1 error) *MockDynamoDBI_DescribeEndpointsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeEndpointsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeEndpointsInput, ...request.Option) (*dynamodb.DescribeEndpointsOutput, error)) *MockDynamoDBI_DescribeEndpointsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeExport provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeExport(_a0 *dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeExportInput) *dynamodb.DescribeExportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeExportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeExport'
type MockDynamoDBI_DescribeExport_Call struct {
	*mock.Call
}

// DescribeExport is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeExportInput
func (_e *MockDynamoDBI_Expecter) DescribeExport(_a0 interface{}) *MockDynamoDBI_DescribeExport_Call {
	return &MockDynamoDBI_DescribeExport_Call{Call: _e.mock.On("DescribeExport", _a0)}
}

func (_c *MockDynamoDBI_DescribeExport_Call) Run(run func(_a0 *dynamodb.DescribeExportInput)) *MockDynamoDBI_DescribeExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeExportInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeExport_Call) Return(_a0 *dynamodb.DescribeExportOutput, _a1 error) *MockDynamoDBI_DescribeExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeExport_Call) RunAndReturn(run func(*dynamodb.DescribeExportInput) (*dynamodb.DescribeExportOutput, error)) *MockDynamoDBI_DescribeExport_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeExportRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeExportRequest(_a0 *dynamodb.DescribeExportInput) (*request.Request, *dynamodb.DescribeExportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeExportOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeExportInput) (*request.Request, *dynamodb.DescribeExportOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeExportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeExportInput) *dynamodb.DescribeExportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeExportOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeExportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeExportRequest'
type MockDynamoDBI_DescribeExportRequest_Call struct {
	*mock.Call
}

// DescribeExportRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeExportInput
func (_e *MockDynamoDBI_Expecter) DescribeExportRequest(_a0 interface{}) *MockDynamoDBI_DescribeExportRequest_Call {
	return &MockDynamoDBI_DescribeExportRequest_Call{Call: _e.mock.On("DescribeExportRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeExportRequest_Call) Run(run func(_a0 *dynamodb.DescribeExportInput)) *MockDynamoDBI_DescribeExportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeExportInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeExportRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeExportOutput) *MockDynamoDBI_DescribeExportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeExportRequest_Call) RunAndReturn(run func(*dynamodb.DescribeExportInput) (*request.Request, *dynamodb.DescribeExportOutput)) *MockDynamoDBI_DescribeExportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeExportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeExportWithContext(_a0 context.Context, _a1 *dynamodb.DescribeExportInput, _a2 ...request.Option) (*dynamodb.DescribeExportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeExportInput, ...request.Option) (*dynamodb.DescribeExportOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeExportInput, ...request.Option) *dynamodb.DescribeExportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeExportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeExportWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeExportWithContext'
type MockDynamoDBI_DescribeExportWithContext_Call struct {
	*mock.Call
}

// DescribeExportWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeExportInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeExportWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeExportWithContext_Call {
	return &MockDynamoDBI_DescribeExportWithContext_Call{Call: _e.mock.On("DescribeExportWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeExportWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeExportInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeExportWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeExportInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeExportWithContext_Call) Return(_a0 *dynamodb.DescribeExportOutput, _a1 error) *MockDynamoDBI_DescribeExportWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeExportWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeExportInput, ...request.Option) (*dynamodb.DescribeExportOutput, error)) *MockDynamoDBI_DescribeExportWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeGlobalTable provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeGlobalTable(_a0 *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeGlobalTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableInput) *dynamodb.DescribeGlobalTableOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeGlobalTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeGlobalTableInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeGlobalTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeGlobalTable'
type MockDynamoDBI_DescribeGlobalTable_Call struct {
	*mock.Call
}

// DescribeGlobalTable is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeGlobalTableInput
func (_e *MockDynamoDBI_Expecter) DescribeGlobalTable(_a0 interface{}) *MockDynamoDBI_DescribeGlobalTable_Call {
	return &MockDynamoDBI_DescribeGlobalTable_Call{Call: _e.mock.On("DescribeGlobalTable", _a0)}
}

func (_c *MockDynamoDBI_DescribeGlobalTable_Call) Run(run func(_a0 *dynamodb.DescribeGlobalTableInput)) *MockDynamoDBI_DescribeGlobalTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeGlobalTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTable_Call) Return(_a0 *dynamodb.DescribeGlobalTableOutput, _a1 error) *MockDynamoDBI_DescribeGlobalTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTable_Call) RunAndReturn(run func(*dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error)) *MockDynamoDBI_DescribeGlobalTable_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeGlobalTableRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeGlobalTableRequest(_a0 *dynamodb.DescribeGlobalTableInput) (*request.Request, *dynamodb.DescribeGlobalTableOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeGlobalTableOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableInput) (*request.Request, *dynamodb.DescribeGlobalTableOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeGlobalTableInput) *dynamodb.DescribeGlobalTableOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeGlobalTableOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeGlobalTableRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeGlobalTableRequest'
type MockDynamoDBI_DescribeGlobalTableRequest_Call struct {
	*mock.Call
}

// DescribeGlobalTableRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeGlobalTableInput
func (_e *MockDynamoDBI_Expecter) DescribeGlobalTableRequest(_a0 interface{}) *MockDynamoDBI_DescribeGlobalTableRequest_Call {
	return &MockDynamoDBI_DescribeGlobalTableRequest_Call{Call: _e.mock.On("DescribeGlobalTableRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeGlobalTableRequest_Call) Run(run func(_a0 *dynamodb.DescribeGlobalTableInput)) *MockDynamoDBI_DescribeGlobalTableRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeGlobalTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeGlobalTableOutput) *MockDynamoDBI_DescribeGlobalTableRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableRequest_Call) RunAndReturn(run func(*dynamodb.DescribeGlobalTableInput) (*request.Request, *dynamodb.DescribeGlobalTableOutput)) *MockDynamoDBI_DescribeGlobalTableRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeGlobalTableSettings provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeGlobalTableSettings(_a0 *dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeGlobalTableSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableSettingsInput) *dynamodb.DescribeGlobalTableSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeGlobalTableSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeGlobalTableSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeGlobalTableSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeGlobalTableSettings'
type MockDynamoDBI_DescribeGlobalTableSettings_Call struct {
	*mock.Call
}

// DescribeGlobalTableSettings is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeGlobalTableSettingsInput
func (_e *MockDynamoDBI_Expecter) DescribeGlobalTableSettings(_a0 interface{}) *MockDynamoDBI_DescribeGlobalTableSettings_Call {
	return &MockDynamoDBI_DescribeGlobalTableSettings_Call{Call: _e.mock.On("DescribeGlobalTableSettings", _a0)}
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettings_Call) Run(run func(_a0 *dynamodb.DescribeGlobalTableSettingsInput)) *MockDynamoDBI_DescribeGlobalTableSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeGlobalTableSettingsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettings_Call) Return(_a0 *dynamodb.DescribeGlobalTableSettingsOutput, _a1 error) *MockDynamoDBI_DescribeGlobalTableSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettings_Call) RunAndReturn(run func(*dynamodb.DescribeGlobalTableSettingsInput) (*dynamodb.DescribeGlobalTableSettingsOutput, error)) *MockDynamoDBI_DescribeGlobalTableSettings_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeGlobalTableSettingsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeGlobalTableSettingsRequest(_a0 *dynamodb.DescribeGlobalTableSettingsInput) (*request.Request, *dynamodb.DescribeGlobalTableSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeGlobalTableSettingsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableSettingsInput) (*request.Request, *dynamodb.DescribeGlobalTableSettingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeGlobalTableSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeGlobalTableSettingsInput) *dynamodb.DescribeGlobalTableSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeGlobalTableSettingsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeGlobalTableSettingsRequest'
type MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call struct {
	*mock.Call
}

// DescribeGlobalTableSettingsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeGlobalTableSettingsInput
func (_e *MockDynamoDBI_Expecter) DescribeGlobalTableSettingsRequest(_a0 interface{}) *MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call {
	return &MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call{Call: _e.mock.On("DescribeGlobalTableSettingsRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call) Run(run func(_a0 *dynamodb.DescribeGlobalTableSettingsInput)) *MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeGlobalTableSettingsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeGlobalTableSettingsOutput) *MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call) RunAndReturn(run func(*dynamodb.DescribeGlobalTableSettingsInput) (*request.Request, *dynamodb.DescribeGlobalTableSettingsOutput)) *MockDynamoDBI_DescribeGlobalTableSettingsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeGlobalTableSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeGlobalTableSettingsWithContext(_a0 context.Context, _a1 *dynamodb.DescribeGlobalTableSettingsInput, _a2 ...request.Option) (*dynamodb.DescribeGlobalTableSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeGlobalTableSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeGlobalTableSettingsInput, ...request.Option) (*dynamodb.DescribeGlobalTableSettingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeGlobalTableSettingsInput, ...request.Option) *dynamodb.DescribeGlobalTableSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeGlobalTableSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeGlobalTableSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeGlobalTableSettingsWithContext'
type MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call struct {
	*mock.Call
}

// DescribeGlobalTableSettingsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeGlobalTableSettingsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeGlobalTableSettingsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call {
	return &MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call{Call: _e.mock.On("DescribeGlobalTableSettingsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeGlobalTableSettingsInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeGlobalTableSettingsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call) Return(_a0 *dynamodb.DescribeGlobalTableSettingsOutput, _a1 error) *MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeGlobalTableSettingsInput, ...request.Option) (*dynamodb.DescribeGlobalTableSettingsOutput, error)) *MockDynamoDBI_DescribeGlobalTableSettingsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeGlobalTableWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeGlobalTableWithContext(_a0 context.Context, _a1 *dynamodb.DescribeGlobalTableInput, _a2 ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeGlobalTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeGlobalTableInput, ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeGlobalTableInput, ...request.Option) *dynamodb.DescribeGlobalTableOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeGlobalTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeGlobalTableInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeGlobalTableWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeGlobalTableWithContext'
type MockDynamoDBI_DescribeGlobalTableWithContext_Call struct {
	*mock.Call
}

// DescribeGlobalTableWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeGlobalTableInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeGlobalTableWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeGlobalTableWithContext_Call {
	return &MockDynamoDBI_DescribeGlobalTableWithContext_Call{Call: _e.mock.On("DescribeGlobalTableWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeGlobalTableWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeGlobalTableInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeGlobalTableWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeGlobalTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableWithContext_Call) Return(_a0 *dynamodb.DescribeGlobalTableOutput, _a1 error) *MockDynamoDBI_DescribeGlobalTableWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeGlobalTableWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeGlobalTableInput, ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error)) *MockDynamoDBI_DescribeGlobalTableWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeImport provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeImport(_a0 *dynamodb.DescribeImportInput) (*dynamodb.DescribeImportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeImportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeImportInput) (*dynamodb.DescribeImportOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeImportInput) *dynamodb.DescribeImportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeImportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeImportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeImport'
type MockDynamoDBI_DescribeImport_Call struct {
	*mock.Call
}

// DescribeImport is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeImportInput
func (_e *MockDynamoDBI_Expecter) DescribeImport(_a0 interface{}) *MockDynamoDBI_DescribeImport_Call {
	return &MockDynamoDBI_DescribeImport_Call{Call: _e.mock.On("DescribeImport", _a0)}
}

func (_c *MockDynamoDBI_DescribeImport_Call) Run(run func(_a0 *dynamodb.DescribeImportInput)) *MockDynamoDBI_DescribeImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeImportInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeImport_Call) Return(_a0 *dynamodb.DescribeImportOutput, _a1 error) *MockDynamoDBI_DescribeImport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeImport_Call) RunAndReturn(run func(*dynamodb.DescribeImportInput) (*dynamodb.DescribeImportOutput, error)) *MockDynamoDBI_DescribeImport_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeImportRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeImportRequest(_a0 *dynamodb.DescribeImportInput) (*request.Request, *dynamodb.DescribeImportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeImportOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeImportInput) (*request.Request, *dynamodb.DescribeImportOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeImportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeImportInput) *dynamodb.DescribeImportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeImportOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeImportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeImportRequest'
type MockDynamoDBI_DescribeImportRequest_Call struct {
	*mock.Call
}

// DescribeImportRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeImportInput
func (_e *MockDynamoDBI_Expecter) DescribeImportRequest(_a0 interface{}) *MockDynamoDBI_DescribeImportRequest_Call {
	return &MockDynamoDBI_DescribeImportRequest_Call{Call: _e.mock.On("DescribeImportRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeImportRequest_Call) Run(run func(_a0 *dynamodb.DescribeImportInput)) *MockDynamoDBI_DescribeImportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeImportInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeImportRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeImportOutput) *MockDynamoDBI_DescribeImportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeImportRequest_Call) RunAndReturn(run func(*dynamodb.DescribeImportInput) (*request.Request, *dynamodb.DescribeImportOutput)) *MockDynamoDBI_DescribeImportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeImportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeImportWithContext(_a0 context.Context, _a1 *dynamodb.DescribeImportInput, _a2 ...request.Option) (*dynamodb.DescribeImportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeImportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeImportInput, ...request.Option) (*dynamodb.DescribeImportOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeImportInput, ...request.Option) *dynamodb.DescribeImportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeImportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeImportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeImportWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeImportWithContext'
type MockDynamoDBI_DescribeImportWithContext_Call struct {
	*mock.Call
}

// DescribeImportWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeImportInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeImportWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeImportWithContext_Call {
	return &MockDynamoDBI_DescribeImportWithContext_Call{Call: _e.mock.On("DescribeImportWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeImportWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeImportInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeImportWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeImportInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeImportWithContext_Call) Return(_a0 *dynamodb.DescribeImportOutput, _a1 error) *MockDynamoDBI_DescribeImportWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeImportWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeImportInput, ...request.Option) (*dynamodb.DescribeImportOutput, error)) *MockDynamoDBI_DescribeImportWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeKinesisStreamingDestination provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeKinesisStreamingDestination(_a0 *dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeKinesisStreamingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeKinesisStreamingDestinationInput) *dynamodb.DescribeKinesisStreamingDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeKinesisStreamingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeKinesisStreamingDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeKinesisStreamingDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeKinesisStreamingDestination'
type MockDynamoDBI_DescribeKinesisStreamingDestination_Call struct {
	*mock.Call
}

// DescribeKinesisStreamingDestination is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeKinesisStreamingDestinationInput
func (_e *MockDynamoDBI_Expecter) DescribeKinesisStreamingDestination(_a0 interface{}) *MockDynamoDBI_DescribeKinesisStreamingDestination_Call {
	return &MockDynamoDBI_DescribeKinesisStreamingDestination_Call{Call: _e.mock.On("DescribeKinesisStreamingDestination", _a0)}
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestination_Call) Run(run func(_a0 *dynamodb.DescribeKinesisStreamingDestinationInput)) *MockDynamoDBI_DescribeKinesisStreamingDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeKinesisStreamingDestinationInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestination_Call) Return(_a0 *dynamodb.DescribeKinesisStreamingDestinationOutput, _a1 error) *MockDynamoDBI_DescribeKinesisStreamingDestination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestination_Call) RunAndReturn(run func(*dynamodb.DescribeKinesisStreamingDestinationInput) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error)) *MockDynamoDBI_DescribeKinesisStreamingDestination_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeKinesisStreamingDestinationRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeKinesisStreamingDestinationRequest(_a0 *dynamodb.DescribeKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DescribeKinesisStreamingDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeKinesisStreamingDestinationOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DescribeKinesisStreamingDestinationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeKinesisStreamingDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeKinesisStreamingDestinationInput) *dynamodb.DescribeKinesisStreamingDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeKinesisStreamingDestinationOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeKinesisStreamingDestinationRequest'
type MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call struct {
	*mock.Call
}

// DescribeKinesisStreamingDestinationRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeKinesisStreamingDestinationInput
func (_e *MockDynamoDBI_Expecter) DescribeKinesisStreamingDestinationRequest(_a0 interface{}) *MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call {
	return &MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call{Call: _e.mock.On("DescribeKinesisStreamingDestinationRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call) Run(run func(_a0 *dynamodb.DescribeKinesisStreamingDestinationInput)) *MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeKinesisStreamingDestinationInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeKinesisStreamingDestinationOutput) *MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call) RunAndReturn(run func(*dynamodb.DescribeKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DescribeKinesisStreamingDestinationOutput)) *MockDynamoDBI_DescribeKinesisStreamingDestinationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeKinesisStreamingDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeKinesisStreamingDestinationWithContext(_a0 context.Context, _a1 *dynamodb.DescribeKinesisStreamingDestinationInput, _a2 ...request.Option) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeKinesisStreamingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeKinesisStreamingDestinationInput, ...request.Option) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeKinesisStreamingDestinationInput, ...request.Option) *dynamodb.DescribeKinesisStreamingDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeKinesisStreamingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeKinesisStreamingDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeKinesisStreamingDestinationWithContext'
type MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call struct {
	*mock.Call
}

// DescribeKinesisStreamingDestinationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeKinesisStreamingDestinationInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeKinesisStreamingDestinationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call {
	return &MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call{Call: _e.mock.On("DescribeKinesisStreamingDestinationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeKinesisStreamingDestinationInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeKinesisStreamingDestinationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call) Return(_a0 *dynamodb.DescribeKinesisStreamingDestinationOutput, _a1 error) *MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeKinesisStreamingDestinationInput, ...request.Option) (*dynamodb.DescribeKinesisStreamingDestinationOutput, error)) *MockDynamoDBI_DescribeKinesisStreamingDestinationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLimits provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeLimits(_a0 *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeLimitsInput) *dynamodb.DescribeLimitsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeLimitsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLimits'
type MockDynamoDBI_DescribeLimits_Call struct {
	*mock.Call
}

// DescribeLimits is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeLimitsInput
func (_e *MockDynamoDBI_Expecter) DescribeLimits(_a0 interface{}) *MockDynamoDBI_DescribeLimits_Call {
	return &MockDynamoDBI_DescribeLimits_Call{Call: _e.mock.On("DescribeLimits", _a0)}
}

func (_c *MockDynamoDBI_DescribeLimits_Call) Run(run func(_a0 *dynamodb.DescribeLimitsInput)) *MockDynamoDBI_DescribeLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeLimitsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeLimits_Call) Return(_a0 *dynamodb.DescribeLimitsOutput, _a1 error) *MockDynamoDBI_DescribeLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeLimits_Call) RunAndReturn(run func(*dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error)) *MockDynamoDBI_DescribeLimits_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLimitsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeLimitsRequest(_a0 *dynamodb.DescribeLimitsInput) (*request.Request, *dynamodb.DescribeLimitsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeLimitsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeLimitsInput) (*request.Request, *dynamodb.DescribeLimitsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeLimitsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeLimitsInput) *dynamodb.DescribeLimitsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeLimitsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeLimitsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLimitsRequest'
type MockDynamoDBI_DescribeLimitsRequest_Call struct {
	*mock.Call
}

// DescribeLimitsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeLimitsInput
func (_e *MockDynamoDBI_Expecter) DescribeLimitsRequest(_a0 interface{}) *MockDynamoDBI_DescribeLimitsRequest_Call {
	return &MockDynamoDBI_DescribeLimitsRequest_Call{Call: _e.mock.On("DescribeLimitsRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeLimitsRequest_Call) Run(run func(_a0 *dynamodb.DescribeLimitsInput)) *MockDynamoDBI_DescribeLimitsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeLimitsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeLimitsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeLimitsOutput) *MockDynamoDBI_DescribeLimitsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeLimitsRequest_Call) RunAndReturn(run func(*dynamodb.DescribeLimitsInput) (*request.Request, *dynamodb.DescribeLimitsOutput)) *MockDynamoDBI_DescribeLimitsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLimitsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeLimitsWithContext(_a0 context.Context, _a1 *dynamodb.DescribeLimitsInput, _a2 ...request.Option) (*dynamodb.DescribeLimitsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeLimitsInput, ...request.Option) (*dynamodb.DescribeLimitsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeLimitsInput, ...request.Option) *dynamodb.DescribeLimitsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeLimitsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeLimitsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLimitsWithContext'
type MockDynamoDBI_DescribeLimitsWithContext_Call struct {
	*mock.Call
}

// DescribeLimitsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeLimitsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeLimitsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeLimitsWithContext_Call {
	return &MockDynamoDBI_DescribeLimitsWithContext_Call{Call: _e.mock.On("DescribeLimitsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeLimitsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeLimitsInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeLimitsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeLimitsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeLimitsWithContext_Call) Return(_a0 *dynamodb.DescribeLimitsOutput, _a1 error) *MockDynamoDBI_DescribeLimitsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeLimitsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeLimitsInput, ...request.Option) (*dynamodb.DescribeLimitsOutput, error)) *MockDynamoDBI_DescribeLimitsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTable provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeTable(_a0 *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableInput) *dynamodb.DescribeTableOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeTableInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTable'
type MockDynamoDBI_DescribeTable_Call struct {
	*mock.Call
}

// DescribeTable is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeTableInput
func (_e *MockDynamoDBI_Expecter) DescribeTable(_a0 interface{}) *MockDynamoDBI_DescribeTable_Call {
	return &MockDynamoDBI_DescribeTable_Call{Call: _e.mock.On("DescribeTable", _a0)}
}

func (_c *MockDynamoDBI_DescribeTable_Call) Run(run func(_a0 *dynamodb.DescribeTableInput)) *MockDynamoDBI_DescribeTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTable_Call) Return(_a0 *dynamodb.DescribeTableOutput, _a1 error) *MockDynamoDBI_DescribeTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTable_Call) RunAndReturn(run func(*dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error)) *MockDynamoDBI_DescribeTable_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTableReplicaAutoScaling provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeTableReplicaAutoScaling(_a0 *dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeTableReplicaAutoScalingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableReplicaAutoScalingInput) *dynamodb.DescribeTableReplicaAutoScalingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeTableReplicaAutoScalingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeTableReplicaAutoScalingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTableReplicaAutoScaling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTableReplicaAutoScaling'
type MockDynamoDBI_DescribeTableReplicaAutoScaling_Call struct {
	*mock.Call
}

// DescribeTableReplicaAutoScaling is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeTableReplicaAutoScalingInput
func (_e *MockDynamoDBI_Expecter) DescribeTableReplicaAutoScaling(_a0 interface{}) *MockDynamoDBI_DescribeTableReplicaAutoScaling_Call {
	return &MockDynamoDBI_DescribeTableReplicaAutoScaling_Call{Call: _e.mock.On("DescribeTableReplicaAutoScaling", _a0)}
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScaling_Call) Run(run func(_a0 *dynamodb.DescribeTableReplicaAutoScalingInput)) *MockDynamoDBI_DescribeTableReplicaAutoScaling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeTableReplicaAutoScalingInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScaling_Call) Return(_a0 *dynamodb.DescribeTableReplicaAutoScalingOutput, _a1 error) *MockDynamoDBI_DescribeTableReplicaAutoScaling_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScaling_Call) RunAndReturn(run func(*dynamodb.DescribeTableReplicaAutoScalingInput) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error)) *MockDynamoDBI_DescribeTableReplicaAutoScaling_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTableReplicaAutoScalingRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeTableReplicaAutoScalingRequest(_a0 *dynamodb.DescribeTableReplicaAutoScalingInput) (*request.Request, *dynamodb.DescribeTableReplicaAutoScalingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeTableReplicaAutoScalingOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableReplicaAutoScalingInput) (*request.Request, *dynamodb.DescribeTableReplicaAutoScalingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableReplicaAutoScalingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeTableReplicaAutoScalingInput) *dynamodb.DescribeTableReplicaAutoScalingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeTableReplicaAutoScalingOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTableReplicaAutoScalingRequest'
type MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call struct {
	*mock.Call
}

// DescribeTableReplicaAutoScalingRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeTableReplicaAutoScalingInput
func (_e *MockDynamoDBI_Expecter) DescribeTableReplicaAutoScalingRequest(_a0 interface{}) *MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call {
	return &MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call{Call: _e.mock.On("DescribeTableReplicaAutoScalingRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call) Run(run func(_a0 *dynamodb.DescribeTableReplicaAutoScalingInput)) *MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeTableReplicaAutoScalingInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeTableReplicaAutoScalingOutput) *MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call) RunAndReturn(run func(*dynamodb.DescribeTableReplicaAutoScalingInput) (*request.Request, *dynamodb.DescribeTableReplicaAutoScalingOutput)) *MockDynamoDBI_DescribeTableReplicaAutoScalingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTableReplicaAutoScalingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeTableReplicaAutoScalingWithContext(_a0 context.Context, _a1 *dynamodb.DescribeTableReplicaAutoScalingInput, _a2 ...request.Option) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeTableReplicaAutoScalingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTableReplicaAutoScalingInput, ...request.Option) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTableReplicaAutoScalingInput, ...request.Option) *dynamodb.DescribeTableReplicaAutoScalingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeTableReplicaAutoScalingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeTableReplicaAutoScalingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTableReplicaAutoScalingWithContext'
type MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call struct {
	*mock.Call
}

// DescribeTableReplicaAutoScalingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeTableReplicaAutoScalingInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeTableReplicaAutoScalingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call {
	return &MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call{Call: _e.mock.On("DescribeTableReplicaAutoScalingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeTableReplicaAutoScalingInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeTableReplicaAutoScalingInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call) Return(_a0 *dynamodb.DescribeTableReplicaAutoScalingOutput, _a1 error) *MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeTableReplicaAutoScalingInput, ...request.Option) (*dynamodb.DescribeTableReplicaAutoScalingOutput, error)) *MockDynamoDBI_DescribeTableReplicaAutoScalingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTableRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeTableRequest(_a0 *dynamodb.DescribeTableInput) (*request.Request, *dynamodb.DescribeTableOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeTableOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableInput) (*request.Request, *dynamodb.DescribeTableOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeTableInput) *dynamodb.DescribeTableOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeTableOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTableRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTableRequest'
type MockDynamoDBI_DescribeTableRequest_Call struct {
	*mock.Call
}

// DescribeTableRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeTableInput
func (_e *MockDynamoDBI_Expecter) DescribeTableRequest(_a0 interface{}) *MockDynamoDBI_DescribeTableRequest_Call {
	return &MockDynamoDBI_DescribeTableRequest_Call{Call: _e.mock.On("DescribeTableRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeTableRequest_Call) Run(run func(_a0 *dynamodb.DescribeTableInput)) *MockDynamoDBI_DescribeTableRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTableRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeTableOutput) *MockDynamoDBI_DescribeTableRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTableRequest_Call) RunAndReturn(run func(*dynamodb.DescribeTableInput) (*request.Request, *dynamodb.DescribeTableOutput)) *MockDynamoDBI_DescribeTableRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTableWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeTableWithContext(_a0 context.Context, _a1 *dynamodb.DescribeTableInput, _a2 ...request.Option) (*dynamodb.DescribeTableOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTableInput, ...request.Option) (*dynamodb.DescribeTableOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTableInput, ...request.Option) *dynamodb.DescribeTableOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeTableInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTableWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTableWithContext'
type MockDynamoDBI_DescribeTableWithContext_Call struct {
	*mock.Call
}

// DescribeTableWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeTableInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeTableWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeTableWithContext_Call {
	return &MockDynamoDBI_DescribeTableWithContext_Call{Call: _e.mock.On("DescribeTableWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeTableWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeTableInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeTableWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTableWithContext_Call) Return(_a0 *dynamodb.DescribeTableOutput, _a1 error) *MockDynamoDBI_DescribeTableWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTableWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeTableInput, ...request.Option) (*dynamodb.DescribeTableOutput, error)) *MockDynamoDBI_DescribeTableWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTimeToLive provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeTimeToLive(_a0 *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DescribeTimeToLiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTimeToLiveInput) *dynamodb.DescribeTimeToLiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeTimeToLiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeTimeToLiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTimeToLive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTimeToLive'
type MockDynamoDBI_DescribeTimeToLive_Call struct {
	*mock.Call
}

// DescribeTimeToLive is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeTimeToLiveInput
func (_e *MockDynamoDBI_Expecter) DescribeTimeToLive(_a0 interface{}) *MockDynamoDBI_DescribeTimeToLive_Call {
	return &MockDynamoDBI_DescribeTimeToLive_Call{Call: _e.mock.On("DescribeTimeToLive", _a0)}
}

func (_c *MockDynamoDBI_DescribeTimeToLive_Call) Run(run func(_a0 *dynamodb.DescribeTimeToLiveInput)) *MockDynamoDBI_DescribeTimeToLive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeTimeToLiveInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTimeToLive_Call) Return(_a0 *dynamodb.DescribeTimeToLiveOutput, _a1 error) *MockDynamoDBI_DescribeTimeToLive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTimeToLive_Call) RunAndReturn(run func(*dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error)) *MockDynamoDBI_DescribeTimeToLive_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTimeToLiveRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DescribeTimeToLiveRequest(_a0 *dynamodb.DescribeTimeToLiveInput) (*request.Request, *dynamodb.DescribeTimeToLiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DescribeTimeToLiveOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTimeToLiveInput) (*request.Request, *dynamodb.DescribeTimeToLiveOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTimeToLiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DescribeTimeToLiveInput) *dynamodb.DescribeTimeToLiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DescribeTimeToLiveOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTimeToLiveRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTimeToLiveRequest'
type MockDynamoDBI_DescribeTimeToLiveRequest_Call struct {
	*mock.Call
}

// DescribeTimeToLiveRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeTimeToLiveInput
func (_e *MockDynamoDBI_Expecter) DescribeTimeToLiveRequest(_a0 interface{}) *MockDynamoDBI_DescribeTimeToLiveRequest_Call {
	return &MockDynamoDBI_DescribeTimeToLiveRequest_Call{Call: _e.mock.On("DescribeTimeToLiveRequest", _a0)}
}

func (_c *MockDynamoDBI_DescribeTimeToLiveRequest_Call) Run(run func(_a0 *dynamodb.DescribeTimeToLiveInput)) *MockDynamoDBI_DescribeTimeToLiveRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeTimeToLiveInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTimeToLiveRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DescribeTimeToLiveOutput) *MockDynamoDBI_DescribeTimeToLiveRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTimeToLiveRequest_Call) RunAndReturn(run func(*dynamodb.DescribeTimeToLiveInput) (*request.Request, *dynamodb.DescribeTimeToLiveOutput)) *MockDynamoDBI_DescribeTimeToLiveRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeTimeToLiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DescribeTimeToLiveWithContext(_a0 context.Context, _a1 *dynamodb.DescribeTimeToLiveInput, _a2 ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DescribeTimeToLiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTimeToLiveInput, ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTimeToLiveInput, ...request.Option) *dynamodb.DescribeTimeToLiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DescribeTimeToLiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DescribeTimeToLiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DescribeTimeToLiveWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeTimeToLiveWithContext'
type MockDynamoDBI_DescribeTimeToLiveWithContext_Call struct {
	*mock.Call
}

// DescribeTimeToLiveWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeTimeToLiveInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DescribeTimeToLiveWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DescribeTimeToLiveWithContext_Call {
	return &MockDynamoDBI_DescribeTimeToLiveWithContext_Call{Call: _e.mock.On("DescribeTimeToLiveWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DescribeTimeToLiveWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeTimeToLiveInput, _a2 ...request.Option)) *MockDynamoDBI_DescribeTimeToLiveWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeTimeToLiveInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DescribeTimeToLiveWithContext_Call) Return(_a0 *dynamodb.DescribeTimeToLiveOutput, _a1 error) *MockDynamoDBI_DescribeTimeToLiveWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DescribeTimeToLiveWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeTimeToLiveInput, ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error)) *MockDynamoDBI_DescribeTimeToLiveWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DisableKinesisStreamingDestination provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DisableKinesisStreamingDestination(_a0 *dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.DisableKinesisStreamingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DisableKinesisStreamingDestinationInput) *dynamodb.DisableKinesisStreamingDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DisableKinesisStreamingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DisableKinesisStreamingDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DisableKinesisStreamingDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableKinesisStreamingDestination'
type MockDynamoDBI_DisableKinesisStreamingDestination_Call struct {
	*mock.Call
}

// DisableKinesisStreamingDestination is a helper method to define mock.On call
//   - _a0 *dynamodb.DisableKinesisStreamingDestinationInput
func (_e *MockDynamoDBI_Expecter) DisableKinesisStreamingDestination(_a0 interface{}) *MockDynamoDBI_DisableKinesisStreamingDestination_Call {
	return &MockDynamoDBI_DisableKinesisStreamingDestination_Call{Call: _e.mock.On("DisableKinesisStreamingDestination", _a0)}
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestination_Call) Run(run func(_a0 *dynamodb.DisableKinesisStreamingDestinationInput)) *MockDynamoDBI_DisableKinesisStreamingDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DisableKinesisStreamingDestinationInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestination_Call) Return(_a0 *dynamodb.DisableKinesisStreamingDestinationOutput, _a1 error) *MockDynamoDBI_DisableKinesisStreamingDestination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestination_Call) RunAndReturn(run func(*dynamodb.DisableKinesisStreamingDestinationInput) (*dynamodb.DisableKinesisStreamingDestinationOutput, error)) *MockDynamoDBI_DisableKinesisStreamingDestination_Call {
	_c.Call.Return(run)
	return _c
}

// DisableKinesisStreamingDestinationRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) DisableKinesisStreamingDestinationRequest(_a0 *dynamodb.DisableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DisableKinesisStreamingDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.DisableKinesisStreamingDestinationOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DisableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DisableKinesisStreamingDestinationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.DisableKinesisStreamingDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.DisableKinesisStreamingDestinationInput) *dynamodb.DisableKinesisStreamingDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.DisableKinesisStreamingDestinationOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableKinesisStreamingDestinationRequest'
type MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call struct {
	*mock.Call
}

// DisableKinesisStreamingDestinationRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.DisableKinesisStreamingDestinationInput
func (_e *MockDynamoDBI_Expecter) DisableKinesisStreamingDestinationRequest(_a0 interface{}) *MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call {
	return &MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call{Call: _e.mock.On("DisableKinesisStreamingDestinationRequest", _a0)}
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call) Run(run func(_a0 *dynamodb.DisableKinesisStreamingDestinationInput)) *MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DisableKinesisStreamingDestinationInput))
	})
	return _c
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.DisableKinesisStreamingDestinationOutput) *MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call) RunAndReturn(run func(*dynamodb.DisableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.DisableKinesisStreamingDestinationOutput)) *MockDynamoDBI_DisableKinesisStreamingDestinationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DisableKinesisStreamingDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) DisableKinesisStreamingDestinationWithContext(_a0 context.Context, _a1 *dynamodb.DisableKinesisStreamingDestinationInput, _a2 ...request.Option) (*dynamodb.DisableKinesisStreamingDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.DisableKinesisStreamingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DisableKinesisStreamingDestinationInput, ...request.Option) (*dynamodb.DisableKinesisStreamingDestinationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DisableKinesisStreamingDestinationInput, ...request.Option) *dynamodb.DisableKinesisStreamingDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DisableKinesisStreamingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DisableKinesisStreamingDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableKinesisStreamingDestinationWithContext'
type MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call struct {
	*mock.Call
}

// DisableKinesisStreamingDestinationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DisableKinesisStreamingDestinationInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) DisableKinesisStreamingDestinationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call {
	return &MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call{Call: _e.mock.On("DisableKinesisStreamingDestinationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DisableKinesisStreamingDestinationInput, _a2 ...request.Option)) *MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DisableKinesisStreamingDestinationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call) Return(_a0 *dynamodb.DisableKinesisStreamingDestinationOutput, _a1 error) *MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DisableKinesisStreamingDestinationInput, ...request.Option) (*dynamodb.DisableKinesisStreamingDestinationOutput, error)) *MockDynamoDBI_DisableKinesisStreamingDestinationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// EnableKinesisStreamingDestination provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) EnableKinesisStreamingDestination(_a0 *dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.EnableKinesisStreamingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.EnableKinesisStreamingDestinationInput) *dynamodb.EnableKinesisStreamingDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.EnableKinesisStreamingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.EnableKinesisStreamingDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_EnableKinesisStreamingDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableKinesisStreamingDestination'
type MockDynamoDBI_EnableKinesisStreamingDestination_Call struct {
	*mock.Call
}

// EnableKinesisStreamingDestination is a helper method to define mock.On call
//   - _a0 *dynamodb.EnableKinesisStreamingDestinationInput
func (_e *MockDynamoDBI_Expecter) EnableKinesisStreamingDestination(_a0 interface{}) *MockDynamoDBI_EnableKinesisStreamingDestination_Call {
	return &MockDynamoDBI_EnableKinesisStreamingDestination_Call{Call: _e.mock.On("EnableKinesisStreamingDestination", _a0)}
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestination_Call) Run(run func(_a0 *dynamodb.EnableKinesisStreamingDestinationInput)) *MockDynamoDBI_EnableKinesisStreamingDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.EnableKinesisStreamingDestinationInput))
	})
	return _c
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestination_Call) Return(_a0 *dynamodb.EnableKinesisStreamingDestinationOutput, _a1 error) *MockDynamoDBI_EnableKinesisStreamingDestination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestination_Call) RunAndReturn(run func(*dynamodb.EnableKinesisStreamingDestinationInput) (*dynamodb.EnableKinesisStreamingDestinationOutput, error)) *MockDynamoDBI_EnableKinesisStreamingDestination_Call {
	_c.Call.Return(run)
	return _c
}

// EnableKinesisStreamingDestinationRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) EnableKinesisStreamingDestinationRequest(_a0 *dynamodb.EnableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.EnableKinesisStreamingDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.EnableKinesisStreamingDestinationOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.EnableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.EnableKinesisStreamingDestinationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.EnableKinesisStreamingDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.EnableKinesisStreamingDestinationInput) *dynamodb.EnableKinesisStreamingDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.EnableKinesisStreamingDestinationOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableKinesisStreamingDestinationRequest'
type MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call struct {
	*mock.Call
}

// EnableKinesisStreamingDestinationRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.EnableKinesisStreamingDestinationInput
func (_e *MockDynamoDBI_Expecter) EnableKinesisStreamingDestinationRequest(_a0 interface{}) *MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call {
	return &MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call{Call: _e.mock.On("EnableKinesisStreamingDestinationRequest", _a0)}
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call) Run(run func(_a0 *dynamodb.EnableKinesisStreamingDestinationInput)) *MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.EnableKinesisStreamingDestinationInput))
	})
	return _c
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.EnableKinesisStreamingDestinationOutput) *MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call) RunAndReturn(run func(*dynamodb.EnableKinesisStreamingDestinationInput) (*request.Request, *dynamodb.EnableKinesisStreamingDestinationOutput)) *MockDynamoDBI_EnableKinesisStreamingDestinationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// EnableKinesisStreamingDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) EnableKinesisStreamingDestinationWithContext(_a0 context.Context, _a1 *dynamodb.EnableKinesisStreamingDestinationInput, _a2 ...request.Option) (*dynamodb.EnableKinesisStreamingDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.EnableKinesisStreamingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.EnableKinesisStreamingDestinationInput, ...request.Option) (*dynamodb.EnableKinesisStreamingDestinationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.EnableKinesisStreamingDestinationInput, ...request.Option) *dynamodb.EnableKinesisStreamingDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.EnableKinesisStreamingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.EnableKinesisStreamingDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableKinesisStreamingDestinationWithContext'
type MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call struct {
	*mock.Call
}

// EnableKinesisStreamingDestinationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.EnableKinesisStreamingDestinationInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) EnableKinesisStreamingDestinationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call {
	return &MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call{Call: _e.mock.On("EnableKinesisStreamingDestinationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.EnableKinesisStreamingDestinationInput, _a2 ...request.Option)) *MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.EnableKinesisStreamingDestinationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call) Return(_a0 *dynamodb.EnableKinesisStreamingDestinationOutput, _a1 error) *MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.EnableKinesisStreamingDestinationInput, ...request.Option) (*dynamodb.EnableKinesisStreamingDestinationOutput, error)) *MockDynamoDBI_EnableKinesisStreamingDestinationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteStatement provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ExecuteStatement(_a0 *dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ExecuteStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ExecuteStatementInput) *dynamodb.ExecuteStatementOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ExecuteStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ExecuteStatementInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ExecuteStatement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteStatement'
type MockDynamoDBI_ExecuteStatement_Call struct {
	*mock.Call
}

// ExecuteStatement is a helper method to define mock.On call
//   - _a0 *dynamodb.ExecuteStatementInput
func (_e *MockDynamoDBI_Expecter) ExecuteStatement(_a0 interface{}) *MockDynamoDBI_ExecuteStatement_Call {
	return &MockDynamoDBI_ExecuteStatement_Call{Call: _e.mock.On("ExecuteStatement", _a0)}
}

func (_c *MockDynamoDBI_ExecuteStatement_Call) Run(run func(_a0 *dynamodb.ExecuteStatementInput)) *MockDynamoDBI_ExecuteStatement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ExecuteStatementInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ExecuteStatement_Call) Return(_a0 *dynamodb.ExecuteStatementOutput, _a1 error) *MockDynamoDBI_ExecuteStatement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExecuteStatement_Call) RunAndReturn(run func(*dynamodb.ExecuteStatementInput) (*dynamodb.ExecuteStatementOutput, error)) *MockDynamoDBI_ExecuteStatement_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteStatementRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ExecuteStatementRequest(_a0 *dynamodb.ExecuteStatementInput) (*request.Request, *dynamodb.ExecuteStatementOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ExecuteStatementOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ExecuteStatementInput) (*request.Request, *dynamodb.ExecuteStatementOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ExecuteStatementInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ExecuteStatementInput) *dynamodb.ExecuteStatementOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ExecuteStatementOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ExecuteStatementRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteStatementRequest'
type MockDynamoDBI_ExecuteStatementRequest_Call struct {
	*mock.Call
}

// ExecuteStatementRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ExecuteStatementInput
func (_e *MockDynamoDBI_Expecter) ExecuteStatementRequest(_a0 interface{}) *MockDynamoDBI_ExecuteStatementRequest_Call {
	return &MockDynamoDBI_ExecuteStatementRequest_Call{Call: _e.mock.On("ExecuteStatementRequest", _a0)}
}

func (_c *MockDynamoDBI_ExecuteStatementRequest_Call) Run(run func(_a0 *dynamodb.ExecuteStatementInput)) *MockDynamoDBI_ExecuteStatementRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ExecuteStatementInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ExecuteStatementRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ExecuteStatementOutput) *MockDynamoDBI_ExecuteStatementRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExecuteStatementRequest_Call) RunAndReturn(run func(*dynamodb.ExecuteStatementInput) (*request.Request, *dynamodb.ExecuteStatementOutput)) *MockDynamoDBI_ExecuteStatementRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteStatementWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ExecuteStatementWithContext(_a0 context.Context, _a1 *dynamodb.ExecuteStatementInput, _a2 ...request.Option) (*dynamodb.ExecuteStatementOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ExecuteStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ExecuteStatementInput, ...request.Option) (*dynamodb.ExecuteStatementOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ExecuteStatementInput, ...request.Option) *dynamodb.ExecuteStatementOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ExecuteStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ExecuteStatementInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ExecuteStatementWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteStatementWithContext'
type MockDynamoDBI_ExecuteStatementWithContext_Call struct {
	*mock.Call
}

// ExecuteStatementWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ExecuteStatementInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ExecuteStatementWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ExecuteStatementWithContext_Call {
	return &MockDynamoDBI_ExecuteStatementWithContext_Call{Call: _e.mock.On("ExecuteStatementWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ExecuteStatementWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ExecuteStatementInput, _a2 ...request.Option)) *MockDynamoDBI_ExecuteStatementWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ExecuteStatementInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ExecuteStatementWithContext_Call) Return(_a0 *dynamodb.ExecuteStatementOutput, _a1 error) *MockDynamoDBI_ExecuteStatementWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExecuteStatementWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ExecuteStatementInput, ...request.Option) (*dynamodb.ExecuteStatementOutput, error)) *MockDynamoDBI_ExecuteStatementWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTransaction provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ExecuteTransaction(_a0 *dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ExecuteTransactionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ExecuteTransactionInput) *dynamodb.ExecuteTransactionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ExecuteTransactionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ExecuteTransactionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ExecuteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTransaction'
type MockDynamoDBI_ExecuteTransaction_Call struct {
	*mock.Call
}

// ExecuteTransaction is a helper method to define mock.On call
//   - _a0 *dynamodb.ExecuteTransactionInput
func (_e *MockDynamoDBI_Expecter) ExecuteTransaction(_a0 interface{}) *MockDynamoDBI_ExecuteTransaction_Call {
	return &MockDynamoDBI_ExecuteTransaction_Call{Call: _e.mock.On("ExecuteTransaction", _a0)}
}

func (_c *MockDynamoDBI_ExecuteTransaction_Call) Run(run func(_a0 *dynamodb.ExecuteTransactionInput)) *MockDynamoDBI_ExecuteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ExecuteTransactionInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ExecuteTransaction_Call) Return(_a0 *dynamodb.ExecuteTransactionOutput, _a1 error) *MockDynamoDBI_ExecuteTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExecuteTransaction_Call) RunAndReturn(run func(*dynamodb.ExecuteTransactionInput) (*dynamodb.ExecuteTransactionOutput, error)) *MockDynamoDBI_ExecuteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTransactionRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ExecuteTransactionRequest(_a0 *dynamodb.ExecuteTransactionInput) (*request.Request, *dynamodb.ExecuteTransactionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ExecuteTransactionOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ExecuteTransactionInput) (*request.Request, *dynamodb.ExecuteTransactionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ExecuteTransactionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ExecuteTransactionInput) *dynamodb.ExecuteTransactionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ExecuteTransactionOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ExecuteTransactionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTransactionRequest'
type MockDynamoDBI_ExecuteTransactionRequest_Call struct {
	*mock.Call
}

// ExecuteTransactionRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ExecuteTransactionInput
func (_e *MockDynamoDBI_Expecter) ExecuteTransactionRequest(_a0 interface{}) *MockDynamoDBI_ExecuteTransactionRequest_Call {
	return &MockDynamoDBI_ExecuteTransactionRequest_Call{Call: _e.mock.On("ExecuteTransactionRequest", _a0)}
}

func (_c *MockDynamoDBI_ExecuteTransactionRequest_Call) Run(run func(_a0 *dynamodb.ExecuteTransactionInput)) *MockDynamoDBI_ExecuteTransactionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ExecuteTransactionInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ExecuteTransactionRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ExecuteTransactionOutput) *MockDynamoDBI_ExecuteTransactionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExecuteTransactionRequest_Call) RunAndReturn(run func(*dynamodb.ExecuteTransactionInput) (*request.Request, *dynamodb.ExecuteTransactionOutput)) *MockDynamoDBI_ExecuteTransactionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTransactionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ExecuteTransactionWithContext(_a0 context.Context, _a1 *dynamodb.ExecuteTransactionInput, _a2 ...request.Option) (*dynamodb.ExecuteTransactionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ExecuteTransactionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ExecuteTransactionInput, ...request.Option) (*dynamodb.ExecuteTransactionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ExecuteTransactionInput, ...request.Option) *dynamodb.ExecuteTransactionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ExecuteTransactionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ExecuteTransactionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ExecuteTransactionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTransactionWithContext'
type MockDynamoDBI_ExecuteTransactionWithContext_Call struct {
	*mock.Call
}

// ExecuteTransactionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ExecuteTransactionInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ExecuteTransactionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ExecuteTransactionWithContext_Call {
	return &MockDynamoDBI_ExecuteTransactionWithContext_Call{Call: _e.mock.On("ExecuteTransactionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ExecuteTransactionWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ExecuteTransactionInput, _a2 ...request.Option)) *MockDynamoDBI_ExecuteTransactionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ExecuteTransactionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ExecuteTransactionWithContext_Call) Return(_a0 *dynamodb.ExecuteTransactionOutput, _a1 error) *MockDynamoDBI_ExecuteTransactionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExecuteTransactionWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ExecuteTransactionInput, ...request.Option) (*dynamodb.ExecuteTransactionOutput, error)) *MockDynamoDBI_ExecuteTransactionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ExportTableToPointInTime provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ExportTableToPointInTime(_a0 *dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ExportTableToPointInTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ExportTableToPointInTimeInput) *dynamodb.ExportTableToPointInTimeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ExportTableToPointInTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ExportTableToPointInTimeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ExportTableToPointInTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTableToPointInTime'
type MockDynamoDBI_ExportTableToPointInTime_Call struct {
	*mock.Call
}

// ExportTableToPointInTime is a helper method to define mock.On call
//   - _a0 *dynamodb.ExportTableToPointInTimeInput
func (_e *MockDynamoDBI_Expecter) ExportTableToPointInTime(_a0 interface{}) *MockDynamoDBI_ExportTableToPointInTime_Call {
	return &MockDynamoDBI_ExportTableToPointInTime_Call{Call: _e.mock.On("ExportTableToPointInTime", _a0)}
}

func (_c *MockDynamoDBI_ExportTableToPointInTime_Call) Run(run func(_a0 *dynamodb.ExportTableToPointInTimeInput)) *MockDynamoDBI_ExportTableToPointInTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ExportTableToPointInTimeInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ExportTableToPointInTime_Call) Return(_a0 *dynamodb.ExportTableToPointInTimeOutput, _a1 error) *MockDynamoDBI_ExportTableToPointInTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExportTableToPointInTime_Call) RunAndReturn(run func(*dynamodb.ExportTableToPointInTimeInput) (*dynamodb.ExportTableToPointInTimeOutput, error)) *MockDynamoDBI_ExportTableToPointInTime_Call {
	_c.Call.Return(run)
	return _c
}

// ExportTableToPointInTimeRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ExportTableToPointInTimeRequest(_a0 *dynamodb.ExportTableToPointInTimeInput) (*request.Request, *dynamodb.ExportTableToPointInTimeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ExportTableToPointInTimeOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ExportTableToPointInTimeInput) (*request.Request, *dynamodb.ExportTableToPointInTimeOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ExportTableToPointInTimeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ExportTableToPointInTimeInput) *dynamodb.ExportTableToPointInTimeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ExportTableToPointInTimeOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ExportTableToPointInTimeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTableToPointInTimeRequest'
type MockDynamoDBI_ExportTableToPointInTimeRequest_Call struct {
	*mock.Call
}

// ExportTableToPointInTimeRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ExportTableToPointInTimeInput
func (_e *MockDynamoDBI_Expecter) ExportTableToPointInTimeRequest(_a0 interface{}) *MockDynamoDBI_ExportTableToPointInTimeRequest_Call {
	return &MockDynamoDBI_ExportTableToPointInTimeRequest_Call{Call: _e.mock.On("ExportTableToPointInTimeRequest", _a0)}
}

func (_c *MockDynamoDBI_ExportTableToPointInTimeRequest_Call) Run(run func(_a0 *dynamodb.ExportTableToPointInTimeInput)) *MockDynamoDBI_ExportTableToPointInTimeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ExportTableToPointInTimeInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ExportTableToPointInTimeRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ExportTableToPointInTimeOutput) *MockDynamoDBI_ExportTableToPointInTimeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExportTableToPointInTimeRequest_Call) RunAndReturn(run func(*dynamodb.ExportTableToPointInTimeInput) (*request.Request, *dynamodb.ExportTableToPointInTimeOutput)) *MockDynamoDBI_ExportTableToPointInTimeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ExportTableToPointInTimeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ExportTableToPointInTimeWithContext(_a0 context.Context, _a1 *dynamodb.ExportTableToPointInTimeInput, _a2 ...request.Option) (*dynamodb.ExportTableToPointInTimeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ExportTableToPointInTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ExportTableToPointInTimeInput, ...request.Option) (*dynamodb.ExportTableToPointInTimeOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ExportTableToPointInTimeInput, ...request.Option) *dynamodb.ExportTableToPointInTimeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ExportTableToPointInTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ExportTableToPointInTimeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ExportTableToPointInTimeWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportTableToPointInTimeWithContext'
type MockDynamoDBI_ExportTableToPointInTimeWithContext_Call struct {
	*mock.Call
}

// ExportTableToPointInTimeWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ExportTableToPointInTimeInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ExportTableToPointInTimeWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ExportTableToPointInTimeWithContext_Call {
	return &MockDynamoDBI_ExportTableToPointInTimeWithContext_Call{Call: _e.mock.On("ExportTableToPointInTimeWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ExportTableToPointInTimeWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ExportTableToPointInTimeInput, _a2 ...request.Option)) *MockDynamoDBI_ExportTableToPointInTimeWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ExportTableToPointInTimeInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ExportTableToPointInTimeWithContext_Call) Return(_a0 *dynamodb.ExportTableToPointInTimeOutput, _a1 error) *MockDynamoDBI_ExportTableToPointInTimeWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ExportTableToPointInTimeWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ExportTableToPointInTimeInput, ...request.Option) (*dynamodb.ExportTableToPointInTimeOutput, error)) *MockDynamoDBI_ExportTableToPointInTimeWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetItem provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) GetItem(_a0 *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.GetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.GetItemInput) *dynamodb.GetItemOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.GetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.GetItemInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type MockDynamoDBI_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - _a0 *dynamodb.GetItemInput
func (_e *MockDynamoDBI_Expecter) GetItem(_a0 interface{}) *MockDynamoDBI_GetItem_Call {
	return &MockDynamoDBI_GetItem_Call{Call: _e.mock.On("GetItem", _a0)}
}

func (_c *MockDynamoDBI_GetItem_Call) Run(run func(_a0 *dynamodb.GetItemInput)) *MockDynamoDBI_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.GetItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_GetItem_Call) Return(_a0 *dynamodb.GetItemOutput, _a1 error) *MockDynamoDBI_GetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_GetItem_Call) RunAndReturn(run func(*dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error)) *MockDynamoDBI_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) GetItemRequest(_a0 *dynamodb.GetItemInput) (*request.Request, *dynamodb.GetItemOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.GetItemOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.GetItemInput) (*request.Request, *dynamodb.GetItemOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.GetItemInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.GetItemInput) *dynamodb.GetItemOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.GetItemOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_GetItemRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemRequest'
type MockDynamoDBI_GetItemRequest_Call struct {
	*mock.Call
}

// GetItemRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.GetItemInput
func (_e *MockDynamoDBI_Expecter) GetItemRequest(_a0 interface{}) *MockDynamoDBI_GetItemRequest_Call {
	return &MockDynamoDBI_GetItemRequest_Call{Call: _e.mock.On("GetItemRequest", _a0)}
}

func (_c *MockDynamoDBI_GetItemRequest_Call) Run(run func(_a0 *dynamodb.GetItemInput)) *MockDynamoDBI_GetItemRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.GetItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_GetItemRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.GetItemOutput) *MockDynamoDBI_GetItemRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_GetItemRequest_Call) RunAndReturn(run func(*dynamodb.GetItemInput) (*request.Request, *dynamodb.GetItemOutput)) *MockDynamoDBI_GetItemRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) GetItemWithContext(_a0 context.Context, _a1 *dynamodb.GetItemInput, _a2 ...request.Option) (*dynamodb.GetItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.GetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.GetItemInput, ...request.Option) (*dynamodb.GetItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.GetItemInput, ...request.Option) *dynamodb.GetItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.GetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.GetItemInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_GetItemWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemWithContext'
type MockDynamoDBI_GetItemWithContext_Call struct {
	*mock.Call
}

// GetItemWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.GetItemInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) GetItemWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_GetItemWithContext_Call {
	return &MockDynamoDBI_GetItemWithContext_Call{Call: _e.mock.On("GetItemWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_GetItemWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.GetItemInput, _a2 ...request.Option)) *MockDynamoDBI_GetItemWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.GetItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_GetItemWithContext_Call) Return(_a0 *dynamodb.GetItemOutput, _a1 error) *MockDynamoDBI_GetItemWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_GetItemWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.GetItemInput, ...request.Option) (*dynamodb.GetItemOutput, error)) *MockDynamoDBI_GetItemWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ImportTable provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ImportTable(_a0 *dynamodb.ImportTableInput) (*dynamodb.ImportTableOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ImportTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ImportTableInput) (*dynamodb.ImportTableOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ImportTableInput) *dynamodb.ImportTableOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ImportTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ImportTableInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ImportTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportTable'
type MockDynamoDBI_ImportTable_Call struct {
	*mock.Call
}

// ImportTable is a helper method to define mock.On call
//   - _a0 *dynamodb.ImportTableInput
func (_e *MockDynamoDBI_Expecter) ImportTable(_a0 interface{}) *MockDynamoDBI_ImportTable_Call {
	return &MockDynamoDBI_ImportTable_Call{Call: _e.mock.On("ImportTable", _a0)}
}

func (_c *MockDynamoDBI_ImportTable_Call) Run(run func(_a0 *dynamodb.ImportTableInput)) *MockDynamoDBI_ImportTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ImportTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ImportTable_Call) Return(_a0 *dynamodb.ImportTableOutput, _a1 error) *MockDynamoDBI_ImportTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ImportTable_Call) RunAndReturn(run func(*dynamodb.ImportTableInput) (*dynamodb.ImportTableOutput, error)) *MockDynamoDBI_ImportTable_Call {
	_c.Call.Return(run)
	return _c
}

// ImportTableRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ImportTableRequest(_a0 *dynamodb.ImportTableInput) (*request.Request, *dynamodb.ImportTableOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ImportTableOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ImportTableInput) (*request.Request, *dynamodb.ImportTableOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ImportTableInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ImportTableInput) *dynamodb.ImportTableOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ImportTableOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ImportTableRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportTableRequest'
type MockDynamoDBI_ImportTableRequest_Call struct {
	*mock.Call
}

// ImportTableRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ImportTableInput
func (_e *MockDynamoDBI_Expecter) ImportTableRequest(_a0 interface{}) *MockDynamoDBI_ImportTableRequest_Call {
	return &MockDynamoDBI_ImportTableRequest_Call{Call: _e.mock.On("ImportTableRequest", _a0)}
}

func (_c *MockDynamoDBI_ImportTableRequest_Call) Run(run func(_a0 *dynamodb.ImportTableInput)) *MockDynamoDBI_ImportTableRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ImportTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ImportTableRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ImportTableOutput) *MockDynamoDBI_ImportTableRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ImportTableRequest_Call) RunAndReturn(run func(*dynamodb.ImportTableInput) (*request.Request, *dynamodb.ImportTableOutput)) *MockDynamoDBI_ImportTableRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ImportTableWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ImportTableWithContext(_a0 context.Context, _a1 *dynamodb.ImportTableInput, _a2 ...request.Option) (*dynamodb.ImportTableOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ImportTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ImportTableInput, ...request.Option) (*dynamodb.ImportTableOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ImportTableInput, ...request.Option) *dynamodb.ImportTableOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ImportTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ImportTableInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ImportTableWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportTableWithContext'
type MockDynamoDBI_ImportTableWithContext_Call struct {
	*mock.Call
}

// ImportTableWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ImportTableInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ImportTableWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ImportTableWithContext_Call {
	return &MockDynamoDBI_ImportTableWithContext_Call{Call: _e.mock.On("ImportTableWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ImportTableWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ImportTableInput, _a2 ...request.Option)) *MockDynamoDBI_ImportTableWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ImportTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ImportTableWithContext_Call) Return(_a0 *dynamodb.ImportTableOutput, _a1 error) *MockDynamoDBI_ImportTableWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ImportTableWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ImportTableInput, ...request.Option) (*dynamodb.ImportTableOutput, error)) *MockDynamoDBI_ImportTableWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackups provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListBackups(_a0 *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ListBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListBackupsInput) *dynamodb.ListBackupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListBackupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListBackups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackups'
type MockDynamoDBI_ListBackups_Call struct {
	*mock.Call
}

// ListBackups is a helper method to define mock.On call
//   - _a0 *dynamodb.ListBackupsInput
func (_e *MockDynamoDBI_Expecter) ListBackups(_a0 interface{}) *MockDynamoDBI_ListBackups_Call {
	return &MockDynamoDBI_ListBackups_Call{Call: _e.mock.On("ListBackups", _a0)}
}

func (_c *MockDynamoDBI_ListBackups_Call) Run(run func(_a0 *dynamodb.ListBackupsInput)) *MockDynamoDBI_ListBackups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListBackupsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListBackups_Call) Return(_a0 *dynamodb.ListBackupsOutput, _a1 error) *MockDynamoDBI_ListBackups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListBackups_Call) RunAndReturn(run func(*dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error)) *MockDynamoDBI_ListBackups_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListBackupsRequest(_a0 *dynamodb.ListBackupsInput) (*request.Request, *dynamodb.ListBackupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ListBackupsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ListBackupsInput) (*request.Request, *dynamodb.ListBackupsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListBackupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListBackupsInput) *dynamodb.ListBackupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ListBackupsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ListBackupsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupsRequest'
type MockDynamoDBI_ListBackupsRequest_Call struct {
	*mock.Call
}

// ListBackupsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ListBackupsInput
func (_e *MockDynamoDBI_Expecter) ListBackupsRequest(_a0 interface{}) *MockDynamoDBI_ListBackupsRequest_Call {
	return &MockDynamoDBI_ListBackupsRequest_Call{Call: _e.mock.On("ListBackupsRequest", _a0)}
}

func (_c *MockDynamoDBI_ListBackupsRequest_Call) Run(run func(_a0 *dynamodb.ListBackupsInput)) *MockDynamoDBI_ListBackupsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListBackupsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListBackupsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ListBackupsOutput) *MockDynamoDBI_ListBackupsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListBackupsRequest_Call) RunAndReturn(run func(*dynamodb.ListBackupsInput) (*request.Request, *dynamodb.ListBackupsOutput)) *MockDynamoDBI_ListBackupsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListBackupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ListBackupsWithContext(_a0 context.Context, _a1 *dynamodb.ListBackupsInput, _a2 ...request.Option) (*dynamodb.ListBackupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ListBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListBackupsInput, ...request.Option) (*dynamodb.ListBackupsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListBackupsInput, ...request.Option) *dynamodb.ListBackupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ListBackupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListBackupsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBackupsWithContext'
type MockDynamoDBI_ListBackupsWithContext_Call struct {
	*mock.Call
}

// ListBackupsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListBackupsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListBackupsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ListBackupsWithContext_Call {
	return &MockDynamoDBI_ListBackupsWithContext_Call{Call: _e.mock.On("ListBackupsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ListBackupsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListBackupsInput, _a2 ...request.Option)) *MockDynamoDBI_ListBackupsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListBackupsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListBackupsWithContext_Call) Return(_a0 *dynamodb.ListBackupsOutput, _a1 error) *MockDynamoDBI_ListBackupsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListBackupsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListBackupsInput, ...request.Option) (*dynamodb.ListBackupsOutput, error)) *MockDynamoDBI_ListBackupsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListContributorInsights provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListContributorInsights(_a0 *dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ListContributorInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListContributorInsightsInput) *dynamodb.ListContributorInsightsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListContributorInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListContributorInsightsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListContributorInsights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContributorInsights'
type MockDynamoDBI_ListContributorInsights_Call struct {
	*mock.Call
}

// ListContributorInsights is a helper method to define mock.On call
//   - _a0 *dynamodb.ListContributorInsightsInput
func (_e *MockDynamoDBI_Expecter) ListContributorInsights(_a0 interface{}) *MockDynamoDBI_ListContributorInsights_Call {
	return &MockDynamoDBI_ListContributorInsights_Call{Call: _e.mock.On("ListContributorInsights", _a0)}
}

func (_c *MockDynamoDBI_ListContributorInsights_Call) Run(run func(_a0 *dynamodb.ListContributorInsightsInput)) *MockDynamoDBI_ListContributorInsights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListContributorInsightsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsights_Call) Return(_a0 *dynamodb.ListContributorInsightsOutput, _a1 error) *MockDynamoDBI_ListContributorInsights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsights_Call) RunAndReturn(run func(*dynamodb.ListContributorInsightsInput) (*dynamodb.ListContributorInsightsOutput, error)) *MockDynamoDBI_ListContributorInsights_Call {
	_c.Call.Return(run)
	return _c
}

// ListContributorInsightsPages provides a mock function with given fields: _a0, _a1
func (_m *MockDynamoDBI) ListContributorInsightsPages(_a0 *dynamodb.ListContributorInsightsInput, _a1 func(*dynamodb.ListContributorInsightsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListContributorInsightsInput, func(*dynamodb.ListContributorInsightsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ListContributorInsightsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContributorInsightsPages'
type MockDynamoDBI_ListContributorInsightsPages_Call struct {
	*mock.Call
}

// ListContributorInsightsPages is a helper method to define mock.On call
//   - _a0 *dynamodb.ListContributorInsightsInput
//   - _a1 func(*dynamodb.ListContributorInsightsOutput , bool) bool
func (_e *MockDynamoDBI_Expecter) ListContributorInsightsPages(_a0 interface{}, _a1 interface{}) *MockDynamoDBI_ListContributorInsightsPages_Call {
	return &MockDynamoDBI_ListContributorInsightsPages_Call{Call: _e.mock.On("ListContributorInsightsPages", _a0, _a1)}
}

func (_c *MockDynamoDBI_ListContributorInsightsPages_Call) Run(run func(_a0 *dynamodb.ListContributorInsightsInput, _a1 func(*dynamodb.ListContributorInsightsOutput, bool) bool)) *MockDynamoDBI_ListContributorInsightsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListContributorInsightsInput), args[1].(func(*dynamodb.ListContributorInsightsOutput, bool) bool))
	})
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsightsPages_Call) Return(_a0 error) *MockDynamoDBI_ListContributorInsightsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsightsPages_Call) RunAndReturn(run func(*dynamodb.ListContributorInsightsInput, func(*dynamodb.ListContributorInsightsOutput, bool) bool) error) *MockDynamoDBI_ListContributorInsightsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListContributorInsightsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockDynamoDBI) ListContributorInsightsPagesWithContext(_a0 context.Context, _a1 *dynamodb.ListContributorInsightsInput, _a2 func(*dynamodb.ListContributorInsightsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListContributorInsightsInput, func(*dynamodb.ListContributorInsightsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ListContributorInsightsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContributorInsightsPagesWithContext'
type MockDynamoDBI_ListContributorInsightsPagesWithContext_Call struct {
	*mock.Call
}

// ListContributorInsightsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListContributorInsightsInput
//   - _a2 func(*dynamodb.ListContributorInsightsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListContributorInsightsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockDynamoDBI_ListContributorInsightsPagesWithContext_Call {
	return &MockDynamoDBI_ListContributorInsightsPagesWithContext_Call{Call: _e.mock.On("ListContributorInsightsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockDynamoDBI_ListContributorInsightsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListContributorInsightsInput, _a2 func(*dynamodb.ListContributorInsightsOutput, bool) bool, _a3 ...request.Option)) *MockDynamoDBI_ListContributorInsightsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListContributorInsightsInput), args[2].(func(*dynamodb.ListContributorInsightsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsightsPagesWithContext_Call) Return(_a0 error) *MockDynamoDBI_ListContributorInsightsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsightsPagesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListContributorInsightsInput, func(*dynamodb.ListContributorInsightsOutput, bool) bool, ...request.Option) error) *MockDynamoDBI_ListContributorInsightsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListContributorInsightsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListContributorInsightsRequest(_a0 *dynamodb.ListContributorInsightsInput) (*request.Request, *dynamodb.ListContributorInsightsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ListContributorInsightsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ListContributorInsightsInput) (*request.Request, *dynamodb.ListContributorInsightsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListContributorInsightsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListContributorInsightsInput) *dynamodb.ListContributorInsightsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ListContributorInsightsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ListContributorInsightsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContributorInsightsRequest'
type MockDynamoDBI_ListContributorInsightsRequest_Call struct {
	*mock.Call
}

// ListContributorInsightsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ListContributorInsightsInput
func (_e *MockDynamoDBI_Expecter) ListContributorInsightsRequest(_a0 interface{}) *MockDynamoDBI_ListContributorInsightsRequest_Call {
	return &MockDynamoDBI_ListContributorInsightsRequest_Call{Call: _e.mock.On("ListContributorInsightsRequest", _a0)}
}

func (_c *MockDynamoDBI_ListContributorInsightsRequest_Call) Run(run func(_a0 *dynamodb.ListContributorInsightsInput)) *MockDynamoDBI_ListContributorInsightsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListContributorInsightsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsightsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ListContributorInsightsOutput) *MockDynamoDBI_ListContributorInsightsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsightsRequest_Call) RunAndReturn(run func(*dynamodb.ListContributorInsightsInput) (*request.Request, *dynamodb.ListContributorInsightsOutput)) *MockDynamoDBI_ListContributorInsightsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListContributorInsightsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ListContributorInsightsWithContext(_a0 context.Context, _a1 *dynamodb.ListContributorInsightsInput, _a2 ...request.Option) (*dynamodb.ListContributorInsightsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ListContributorInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListContributorInsightsInput, ...request.Option) (*dynamodb.ListContributorInsightsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListContributorInsightsInput, ...request.Option) *dynamodb.ListContributorInsightsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListContributorInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ListContributorInsightsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListContributorInsightsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContributorInsightsWithContext'
type MockDynamoDBI_ListContributorInsightsWithContext_Call struct {
	*mock.Call
}

// ListContributorInsightsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListContributorInsightsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListContributorInsightsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ListContributorInsightsWithContext_Call {
	return &MockDynamoDBI_ListContributorInsightsWithContext_Call{Call: _e.mock.On("ListContributorInsightsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ListContributorInsightsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListContributorInsightsInput, _a2 ...request.Option)) *MockDynamoDBI_ListContributorInsightsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListContributorInsightsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsightsWithContext_Call) Return(_a0 *dynamodb.ListContributorInsightsOutput, _a1 error) *MockDynamoDBI_ListContributorInsightsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListContributorInsightsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListContributorInsightsInput, ...request.Option) (*dynamodb.ListContributorInsightsOutput, error)) *MockDynamoDBI_ListContributorInsightsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListExports provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListExports(_a0 *dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ListExportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListExportsInput) *dynamodb.ListExportsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListExportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListExportsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListExports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExports'
type MockDynamoDBI_ListExports_Call struct {
	*mock.Call
}

// ListExports is a helper method to define mock.On call
//   - _a0 *dynamodb.ListExportsInput
func (_e *MockDynamoDBI_Expecter) ListExports(_a0 interface{}) *MockDynamoDBI_ListExports_Call {
	return &MockDynamoDBI_ListExports_Call{Call: _e.mock.On("ListExports", _a0)}
}

func (_c *MockDynamoDBI_ListExports_Call) Run(run func(_a0 *dynamodb.ListExportsInput)) *MockDynamoDBI_ListExports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListExportsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListExports_Call) Return(_a0 *dynamodb.ListExportsOutput, _a1 error) *MockDynamoDBI_ListExports_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListExports_Call) RunAndReturn(run func(*dynamodb.ListExportsInput) (*dynamodb.ListExportsOutput, error)) *MockDynamoDBI_ListExports_Call {
	_c.Call.Return(run)
	return _c
}

// ListExportsPages provides a mock function with given fields: _a0, _a1
func (_m *MockDynamoDBI) ListExportsPages(_a0 *dynamodb.ListExportsInput, _a1 func(*dynamodb.ListExportsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListExportsInput, func(*dynamodb.ListExportsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ListExportsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExportsPages'
type MockDynamoDBI_ListExportsPages_Call struct {
	*mock.Call
}

// ListExportsPages is a helper method to define mock.On call
//   - _a0 *dynamodb.ListExportsInput
//   - _a1 func(*dynamodb.ListExportsOutput , bool) bool
func (_e *MockDynamoDBI_Expecter) ListExportsPages(_a0 interface{}, _a1 interface{}) *MockDynamoDBI_ListExportsPages_Call {
	return &MockDynamoDBI_ListExportsPages_Call{Call: _e.mock.On("ListExportsPages", _a0, _a1)}
}

func (_c *MockDynamoDBI_ListExportsPages_Call) Run(run func(_a0 *dynamodb.ListExportsInput, _a1 func(*dynamodb.ListExportsOutput, bool) bool)) *MockDynamoDBI_ListExportsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListExportsInput), args[1].(func(*dynamodb.ListExportsOutput, bool) bool))
	})
	return _c
}

func (_c *MockDynamoDBI_ListExportsPages_Call) Return(_a0 error) *MockDynamoDBI_ListExportsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ListExportsPages_Call) RunAndReturn(run func(*dynamodb.ListExportsInput, func(*dynamodb.ListExportsOutput, bool) bool) error) *MockDynamoDBI_ListExportsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListExportsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockDynamoDBI) ListExportsPagesWithContext(_a0 context.Context, _a1 *dynamodb.ListExportsInput, _a2 func(*dynamodb.ListExportsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListExportsInput, func(*dynamodb.ListExportsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ListExportsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExportsPagesWithContext'
type MockDynamoDBI_ListExportsPagesWithContext_Call struct {
	*mock.Call
}

// ListExportsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListExportsInput
//   - _a2 func(*dynamodb.ListExportsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListExportsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockDynamoDBI_ListExportsPagesWithContext_Call {
	return &MockDynamoDBI_ListExportsPagesWithContext_Call{Call: _e.mock.On("ListExportsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockDynamoDBI_ListExportsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListExportsInput, _a2 func(*dynamodb.ListExportsOutput, bool) bool, _a3 ...request.Option)) *MockDynamoDBI_ListExportsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListExportsInput), args[2].(func(*dynamodb.ListExportsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListExportsPagesWithContext_Call) Return(_a0 error) *MockDynamoDBI_ListExportsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ListExportsPagesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListExportsInput, func(*dynamodb.ListExportsOutput, bool) bool, ...request.Option) error) *MockDynamoDBI_ListExportsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListExportsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListExportsRequest(_a0 *dynamodb.ListExportsInput) (*request.Request, *dynamodb.ListExportsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ListExportsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ListExportsInput) (*request.Request, *dynamodb.ListExportsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListExportsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListExportsInput) *dynamodb.ListExportsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ListExportsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ListExportsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExportsRequest'
type MockDynamoDBI_ListExportsRequest_Call struct {
	*mock.Call
}

// ListExportsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ListExportsInput
func (_e *MockDynamoDBI_Expecter) ListExportsRequest(_a0 interface{}) *MockDynamoDBI_ListExportsRequest_Call {
	return &MockDynamoDBI_ListExportsRequest_Call{Call: _e.mock.On("ListExportsRequest", _a0)}
}

func (_c *MockDynamoDBI_ListExportsRequest_Call) Run(run func(_a0 *dynamodb.ListExportsInput)) *MockDynamoDBI_ListExportsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListExportsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListExportsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ListExportsOutput) *MockDynamoDBI_ListExportsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListExportsRequest_Call) RunAndReturn(run func(*dynamodb.ListExportsInput) (*request.Request, *dynamodb.ListExportsOutput)) *MockDynamoDBI_ListExportsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListExportsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ListExportsWithContext(_a0 context.Context, _a1 *dynamodb.ListExportsInput, _a2 ...request.Option) (*dynamodb.ListExportsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ListExportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListExportsInput, ...request.Option) (*dynamodb.ListExportsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListExportsInput, ...request.Option) *dynamodb.ListExportsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListExportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ListExportsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListExportsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExportsWithContext'
type MockDynamoDBI_ListExportsWithContext_Call struct {
	*mock.Call
}

// ListExportsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListExportsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListExportsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ListExportsWithContext_Call {
	return &MockDynamoDBI_ListExportsWithContext_Call{Call: _e.mock.On("ListExportsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ListExportsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListExportsInput, _a2 ...request.Option)) *MockDynamoDBI_ListExportsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListExportsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListExportsWithContext_Call) Return(_a0 *dynamodb.ListExportsOutput, _a1 error) *MockDynamoDBI_ListExportsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListExportsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListExportsInput, ...request.Option) (*dynamodb.ListExportsOutput, error)) *MockDynamoDBI_ListExportsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListGlobalTables provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListGlobalTables(_a0 *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ListGlobalTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListGlobalTablesInput) *dynamodb.ListGlobalTablesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListGlobalTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListGlobalTablesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListGlobalTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGlobalTables'
type MockDynamoDBI_ListGlobalTables_Call struct {
	*mock.Call
}

// ListGlobalTables is a helper method to define mock.On call
//   - _a0 *dynamodb.ListGlobalTablesInput
func (_e *MockDynamoDBI_Expecter) ListGlobalTables(_a0 interface{}) *MockDynamoDBI_ListGlobalTables_Call {
	return &MockDynamoDBI_ListGlobalTables_Call{Call: _e.mock.On("ListGlobalTables", _a0)}
}

func (_c *MockDynamoDBI_ListGlobalTables_Call) Run(run func(_a0 *dynamodb.ListGlobalTablesInput)) *MockDynamoDBI_ListGlobalTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListGlobalTablesInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListGlobalTables_Call) Return(_a0 *dynamodb.ListGlobalTablesOutput, _a1 error) *MockDynamoDBI_ListGlobalTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListGlobalTables_Call) RunAndReturn(run func(*dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error)) *MockDynamoDBI_ListGlobalTables_Call {
	_c.Call.Return(run)
	return _c
}

// ListGlobalTablesRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListGlobalTablesRequest(_a0 *dynamodb.ListGlobalTablesInput) (*request.Request, *dynamodb.ListGlobalTablesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ListGlobalTablesOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ListGlobalTablesInput) (*request.Request, *dynamodb.ListGlobalTablesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListGlobalTablesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListGlobalTablesInput) *dynamodb.ListGlobalTablesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ListGlobalTablesOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ListGlobalTablesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGlobalTablesRequest'
type MockDynamoDBI_ListGlobalTablesRequest_Call struct {
	*mock.Call
}

// ListGlobalTablesRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ListGlobalTablesInput
func (_e *MockDynamoDBI_Expecter) ListGlobalTablesRequest(_a0 interface{}) *MockDynamoDBI_ListGlobalTablesRequest_Call {
	return &MockDynamoDBI_ListGlobalTablesRequest_Call{Call: _e.mock.On("ListGlobalTablesRequest", _a0)}
}

func (_c *MockDynamoDBI_ListGlobalTablesRequest_Call) Run(run func(_a0 *dynamodb.ListGlobalTablesInput)) *MockDynamoDBI_ListGlobalTablesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListGlobalTablesInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListGlobalTablesRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ListGlobalTablesOutput) *MockDynamoDBI_ListGlobalTablesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListGlobalTablesRequest_Call) RunAndReturn(run func(*dynamodb.ListGlobalTablesInput) (*request.Request, *dynamodb.ListGlobalTablesOutput)) *MockDynamoDBI_ListGlobalTablesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListGlobalTablesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ListGlobalTablesWithContext(_a0 context.Context, _a1 *dynamodb.ListGlobalTablesInput, _a2 ...request.Option) (*dynamodb.ListGlobalTablesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ListGlobalTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListGlobalTablesInput, ...request.Option) (*dynamodb.ListGlobalTablesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListGlobalTablesInput, ...request.Option) *dynamodb.ListGlobalTablesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListGlobalTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ListGlobalTablesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListGlobalTablesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGlobalTablesWithContext'
type MockDynamoDBI_ListGlobalTablesWithContext_Call struct {
	*mock.Call
}

// ListGlobalTablesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListGlobalTablesInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListGlobalTablesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ListGlobalTablesWithContext_Call {
	return &MockDynamoDBI_ListGlobalTablesWithContext_Call{Call: _e.mock.On("ListGlobalTablesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ListGlobalTablesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListGlobalTablesInput, _a2 ...request.Option)) *MockDynamoDBI_ListGlobalTablesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListGlobalTablesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListGlobalTablesWithContext_Call) Return(_a0 *dynamodb.ListGlobalTablesOutput, _a1 error) *MockDynamoDBI_ListGlobalTablesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListGlobalTablesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListGlobalTablesInput, ...request.Option) (*dynamodb.ListGlobalTablesOutput, error)) *MockDynamoDBI_ListGlobalTablesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListImports provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListImports(_a0 *dynamodb.ListImportsInput) (*dynamodb.ListImportsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ListImportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListImportsInput) (*dynamodb.ListImportsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListImportsInput) *dynamodb.ListImportsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListImportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListImportsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListImports_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImports'
type MockDynamoDBI_ListImports_Call struct {
	*mock.Call
}

// ListImports is a helper method to define mock.On call
//   - _a0 *dynamodb.ListImportsInput
func (_e *MockDynamoDBI_Expecter) ListImports(_a0 interface{}) *MockDynamoDBI_ListImports_Call {
	return &MockDynamoDBI_ListImports_Call{Call: _e.mock.On("ListImports", _a0)}
}

func (_c *MockDynamoDBI_ListImports_Call) Run(run func(_a0 *dynamodb.ListImportsInput)) *MockDynamoDBI_ListImports_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListImportsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListImports_Call) Return(_a0 *dynamodb.ListImportsOutput, _a1 error) *MockDynamoDBI_ListImports_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListImports_Call) RunAndReturn(run func(*dynamodb.ListImportsInput) (*dynamodb.ListImportsOutput, error)) *MockDynamoDBI_ListImports_Call {
	_c.Call.Return(run)
	return _c
}

// ListImportsPages provides a mock function with given fields: _a0, _a1
func (_m *MockDynamoDBI) ListImportsPages(_a0 *dynamodb.ListImportsInput, _a1 func(*dynamodb.ListImportsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListImportsInput, func(*dynamodb.ListImportsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ListImportsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImportsPages'
type MockDynamoDBI_ListImportsPages_Call struct {
	*mock.Call
}

// ListImportsPages is a helper method to define mock.On call
//   - _a0 *dynamodb.ListImportsInput
//   - _a1 func(*dynamodb.ListImportsOutput , bool) bool
func (_e *MockDynamoDBI_Expecter) ListImportsPages(_a0 interface{}, _a1 interface{}) *MockDynamoDBI_ListImportsPages_Call {
	return &MockDynamoDBI_ListImportsPages_Call{Call: _e.mock.On("ListImportsPages", _a0, _a1)}
}

func (_c *MockDynamoDBI_ListImportsPages_Call) Run(run func(_a0 *dynamodb.ListImportsInput, _a1 func(*dynamodb.ListImportsOutput, bool) bool)) *MockDynamoDBI_ListImportsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListImportsInput), args[1].(func(*dynamodb.ListImportsOutput, bool) bool))
	})
	return _c
}

func (_c *MockDynamoDBI_ListImportsPages_Call) Return(_a0 error) *MockDynamoDBI_ListImportsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ListImportsPages_Call) RunAndReturn(run func(*dynamodb.ListImportsInput, func(*dynamodb.ListImportsOutput, bool) bool) error) *MockDynamoDBI_ListImportsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListImportsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockDynamoDBI) ListImportsPagesWithContext(_a0 context.Context, _a1 *dynamodb.ListImportsInput, _a2 func(*dynamodb.ListImportsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListImportsInput, func(*dynamodb.ListImportsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ListImportsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImportsPagesWithContext'
type MockDynamoDBI_ListImportsPagesWithContext_Call struct {
	*mock.Call
}

// ListImportsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListImportsInput
//   - _a2 func(*dynamodb.ListImportsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListImportsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockDynamoDBI_ListImportsPagesWithContext_Call {
	return &MockDynamoDBI_ListImportsPagesWithContext_Call{Call: _e.mock.On("ListImportsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockDynamoDBI_ListImportsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListImportsInput, _a2 func(*dynamodb.ListImportsOutput, bool) bool, _a3 ...request.Option)) *MockDynamoDBI_ListImportsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListImportsInput), args[2].(func(*dynamodb.ListImportsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListImportsPagesWithContext_Call) Return(_a0 error) *MockDynamoDBI_ListImportsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ListImportsPagesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListImportsInput, func(*dynamodb.ListImportsOutput, bool) bool, ...request.Option) error) *MockDynamoDBI_ListImportsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListImportsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListImportsRequest(_a0 *dynamodb.ListImportsInput) (*request.Request, *dynamodb.ListImportsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ListImportsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ListImportsInput) (*request.Request, *dynamodb.ListImportsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListImportsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListImportsInput) *dynamodb.ListImportsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ListImportsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ListImportsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImportsRequest'
type MockDynamoDBI_ListImportsRequest_Call struct {
	*mock.Call
}

// ListImportsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ListImportsInput
func (_e *MockDynamoDBI_Expecter) ListImportsRequest(_a0 interface{}) *MockDynamoDBI_ListImportsRequest_Call {
	return &MockDynamoDBI_ListImportsRequest_Call{Call: _e.mock.On("ListImportsRequest", _a0)}
}

func (_c *MockDynamoDBI_ListImportsRequest_Call) Run(run func(_a0 *dynamodb.ListImportsInput)) *MockDynamoDBI_ListImportsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListImportsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListImportsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ListImportsOutput) *MockDynamoDBI_ListImportsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListImportsRequest_Call) RunAndReturn(run func(*dynamodb.ListImportsInput) (*request.Request, *dynamodb.ListImportsOutput)) *MockDynamoDBI_ListImportsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListImportsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ListImportsWithContext(_a0 context.Context, _a1 *dynamodb.ListImportsInput, _a2 ...request.Option) (*dynamodb.ListImportsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ListImportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListImportsInput, ...request.Option) (*dynamodb.ListImportsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListImportsInput, ...request.Option) *dynamodb.ListImportsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListImportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ListImportsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListImportsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImportsWithContext'
type MockDynamoDBI_ListImportsWithContext_Call struct {
	*mock.Call
}

// ListImportsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListImportsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListImportsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ListImportsWithContext_Call {
	return &MockDynamoDBI_ListImportsWithContext_Call{Call: _e.mock.On("ListImportsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ListImportsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListImportsInput, _a2 ...request.Option)) *MockDynamoDBI_ListImportsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListImportsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListImportsWithContext_Call) Return(_a0 *dynamodb.ListImportsOutput, _a1 error) *MockDynamoDBI_ListImportsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListImportsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListImportsInput, ...request.Option) (*dynamodb.ListImportsOutput, error)) *MockDynamoDBI_ListImportsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListTables provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListTables(_a0 *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ListTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTablesInput) *dynamodb.ListTablesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListTablesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTables'
type MockDynamoDBI_ListTables_Call struct {
	*mock.Call
}

// ListTables is a helper method to define mock.On call
//   - _a0 *dynamodb.ListTablesInput
func (_e *MockDynamoDBI_Expecter) ListTables(_a0 interface{}) *MockDynamoDBI_ListTables_Call {
	return &MockDynamoDBI_ListTables_Call{Call: _e.mock.On("ListTables", _a0)}
}

func (_c *MockDynamoDBI_ListTables_Call) Run(run func(_a0 *dynamodb.ListTablesInput)) *MockDynamoDBI_ListTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListTablesInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListTables_Call) Return(_a0 *dynamodb.ListTablesOutput, _a1 error) *MockDynamoDBI_ListTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListTables_Call) RunAndReturn(run func(*dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error)) *MockDynamoDBI_ListTables_Call {
	_c.Call.Return(run)
	return _c
}

// ListTablesPages provides a mock function with given fields: _a0, _a1
func (_m *MockDynamoDBI) ListTablesPages(_a0 *dynamodb.ListTablesInput, _a1 func(*dynamodb.ListTablesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTablesInput, func(*dynamodb.ListTablesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ListTablesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTablesPages'
type MockDynamoDBI_ListTablesPages_Call struct {
	*mock.Call
}

// ListTablesPages is a helper method to define mock.On call
//   - _a0 *dynamodb.ListTablesInput
//   - _a1 func(*dynamodb.ListTablesOutput , bool) bool
func (_e *MockDynamoDBI_Expecter) ListTablesPages(_a0 interface{}, _a1 interface{}) *MockDynamoDBI_ListTablesPages_Call {
	return &MockDynamoDBI_ListTablesPages_Call{Call: _e.mock.On("ListTablesPages", _a0, _a1)}
}

func (_c *MockDynamoDBI_ListTablesPages_Call) Run(run func(_a0 *dynamodb.ListTablesInput, _a1 func(*dynamodb.ListTablesOutput, bool) bool)) *MockDynamoDBI_ListTablesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListTablesInput), args[1].(func(*dynamodb.ListTablesOutput, bool) bool))
	})
	return _c
}

func (_c *MockDynamoDBI_ListTablesPages_Call) Return(_a0 error) *MockDynamoDBI_ListTablesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ListTablesPages_Call) RunAndReturn(run func(*dynamodb.ListTablesInput, func(*dynamodb.ListTablesOutput, bool) bool) error) *MockDynamoDBI_ListTablesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListTablesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockDynamoDBI) ListTablesPagesWithContext(_a0 context.Context, _a1 *dynamodb.ListTablesInput, _a2 func(*dynamodb.ListTablesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListTablesInput, func(*dynamodb.ListTablesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ListTablesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTablesPagesWithContext'
type MockDynamoDBI_ListTablesPagesWithContext_Call struct {
	*mock.Call
}

// ListTablesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListTablesInput
//   - _a2 func(*dynamodb.ListTablesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListTablesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockDynamoDBI_ListTablesPagesWithContext_Call {
	return &MockDynamoDBI_ListTablesPagesWithContext_Call{Call: _e.mock.On("ListTablesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockDynamoDBI_ListTablesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListTablesInput, _a2 func(*dynamodb.ListTablesOutput, bool) bool, _a3 ...request.Option)) *MockDynamoDBI_ListTablesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListTablesInput), args[2].(func(*dynamodb.ListTablesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListTablesPagesWithContext_Call) Return(_a0 error) *MockDynamoDBI_ListTablesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ListTablesPagesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListTablesInput, func(*dynamodb.ListTablesOutput, bool) bool, ...request.Option) error) *MockDynamoDBI_ListTablesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListTablesRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListTablesRequest(_a0 *dynamodb.ListTablesInput) (*request.Request, *dynamodb.ListTablesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ListTablesOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTablesInput) (*request.Request, *dynamodb.ListTablesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTablesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListTablesInput) *dynamodb.ListTablesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ListTablesOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ListTablesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTablesRequest'
type MockDynamoDBI_ListTablesRequest_Call struct {
	*mock.Call
}

// ListTablesRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ListTablesInput
func (_e *MockDynamoDBI_Expecter) ListTablesRequest(_a0 interface{}) *MockDynamoDBI_ListTablesRequest_Call {
	return &MockDynamoDBI_ListTablesRequest_Call{Call: _e.mock.On("ListTablesRequest", _a0)}
}

func (_c *MockDynamoDBI_ListTablesRequest_Call) Run(run func(_a0 *dynamodb.ListTablesInput)) *MockDynamoDBI_ListTablesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListTablesInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListTablesRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ListTablesOutput) *MockDynamoDBI_ListTablesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListTablesRequest_Call) RunAndReturn(run func(*dynamodb.ListTablesInput) (*request.Request, *dynamodb.ListTablesOutput)) *MockDynamoDBI_ListTablesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListTablesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ListTablesWithContext(_a0 context.Context, _a1 *dynamodb.ListTablesInput, _a2 ...request.Option) (*dynamodb.ListTablesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ListTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListTablesInput, ...request.Option) (*dynamodb.ListTablesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListTablesInput, ...request.Option) *dynamodb.ListTablesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ListTablesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListTablesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTablesWithContext'
type MockDynamoDBI_ListTablesWithContext_Call struct {
	*mock.Call
}

// ListTablesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListTablesInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListTablesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ListTablesWithContext_Call {
	return &MockDynamoDBI_ListTablesWithContext_Call{Call: _e.mock.On("ListTablesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ListTablesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListTablesInput, _a2 ...request.Option)) *MockDynamoDBI_ListTablesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListTablesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListTablesWithContext_Call) Return(_a0 *dynamodb.ListTablesOutput, _a1 error) *MockDynamoDBI_ListTablesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListTablesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListTablesInput, ...request.Option) (*dynamodb.ListTablesOutput, error)) *MockDynamoDBI_ListTablesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsOfResource provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListTagsOfResource(_a0 *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ListTagsOfResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTagsOfResourceInput) *dynamodb.ListTagsOfResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListTagsOfResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListTagsOfResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListTagsOfResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsOfResource'
type MockDynamoDBI_ListTagsOfResource_Call struct {
	*mock.Call
}

// ListTagsOfResource is a helper method to define mock.On call
//   - _a0 *dynamodb.ListTagsOfResourceInput
func (_e *MockDynamoDBI_Expecter) ListTagsOfResource(_a0 interface{}) *MockDynamoDBI_ListTagsOfResource_Call {
	return &MockDynamoDBI_ListTagsOfResource_Call{Call: _e.mock.On("ListTagsOfResource", _a0)}
}

func (_c *MockDynamoDBI_ListTagsOfResource_Call) Run(run func(_a0 *dynamodb.ListTagsOfResourceInput)) *MockDynamoDBI_ListTagsOfResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListTagsOfResourceInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListTagsOfResource_Call) Return(_a0 *dynamodb.ListTagsOfResourceOutput, _a1 error) *MockDynamoDBI_ListTagsOfResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListTagsOfResource_Call) RunAndReturn(run func(*dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error)) *MockDynamoDBI_ListTagsOfResource_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsOfResourceRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ListTagsOfResourceRequest(_a0 *dynamodb.ListTagsOfResourceInput) (*request.Request, *dynamodb.ListTagsOfResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ListTagsOfResourceOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTagsOfResourceInput) (*request.Request, *dynamodb.ListTagsOfResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ListTagsOfResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ListTagsOfResourceInput) *dynamodb.ListTagsOfResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ListTagsOfResourceOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ListTagsOfResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsOfResourceRequest'
type MockDynamoDBI_ListTagsOfResourceRequest_Call struct {
	*mock.Call
}

// ListTagsOfResourceRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ListTagsOfResourceInput
func (_e *MockDynamoDBI_Expecter) ListTagsOfResourceRequest(_a0 interface{}) *MockDynamoDBI_ListTagsOfResourceRequest_Call {
	return &MockDynamoDBI_ListTagsOfResourceRequest_Call{Call: _e.mock.On("ListTagsOfResourceRequest", _a0)}
}

func (_c *MockDynamoDBI_ListTagsOfResourceRequest_Call) Run(run func(_a0 *dynamodb.ListTagsOfResourceInput)) *MockDynamoDBI_ListTagsOfResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ListTagsOfResourceInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ListTagsOfResourceRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ListTagsOfResourceOutput) *MockDynamoDBI_ListTagsOfResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListTagsOfResourceRequest_Call) RunAndReturn(run func(*dynamodb.ListTagsOfResourceInput) (*request.Request, *dynamodb.ListTagsOfResourceOutput)) *MockDynamoDBI_ListTagsOfResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsOfResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ListTagsOfResourceWithContext(_a0 context.Context, _a1 *dynamodb.ListTagsOfResourceInput, _a2 ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ListTagsOfResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListTagsOfResourceInput, ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ListTagsOfResourceInput, ...request.Option) *dynamodb.ListTagsOfResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ListTagsOfResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ListTagsOfResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ListTagsOfResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsOfResourceWithContext'
type MockDynamoDBI_ListTagsOfResourceWithContext_Call struct {
	*mock.Call
}

// ListTagsOfResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ListTagsOfResourceInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ListTagsOfResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ListTagsOfResourceWithContext_Call {
	return &MockDynamoDBI_ListTagsOfResourceWithContext_Call{Call: _e.mock.On("ListTagsOfResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ListTagsOfResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ListTagsOfResourceInput, _a2 ...request.Option)) *MockDynamoDBI_ListTagsOfResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ListTagsOfResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ListTagsOfResourceWithContext_Call) Return(_a0 *dynamodb.ListTagsOfResourceOutput, _a1 error) *MockDynamoDBI_ListTagsOfResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ListTagsOfResourceWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ListTagsOfResourceInput, ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error)) *MockDynamoDBI_ListTagsOfResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutItem provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) PutItem(_a0 *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.PutItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.PutItemInput) *dynamodb.PutItemOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.PutItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.PutItemInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_PutItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItem'
type MockDynamoDBI_PutItem_Call struct {
	*mock.Call
}

// PutItem is a helper method to define mock.On call
//   - _a0 *dynamodb.PutItemInput
func (_e *MockDynamoDBI_Expecter) PutItem(_a0 interface{}) *MockDynamoDBI_PutItem_Call {
	return &MockDynamoDBI_PutItem_Call{Call: _e.mock.On("PutItem", _a0)}
}

func (_c *MockDynamoDBI_PutItem_Call) Run(run func(_a0 *dynamodb.PutItemInput)) *MockDynamoDBI_PutItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.PutItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_PutItem_Call) Return(_a0 *dynamodb.PutItemOutput, _a1 error) *MockDynamoDBI_PutItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_PutItem_Call) RunAndReturn(run func(*dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error)) *MockDynamoDBI_PutItem_Call {
	_c.Call.Return(run)
	return _c
}

// PutItemRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) PutItemRequest(_a0 *dynamodb.PutItemInput) (*request.Request, *dynamodb.PutItemOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.PutItemOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.PutItemInput) (*request.Request, *dynamodb.PutItemOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.PutItemInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.PutItemInput) *dynamodb.PutItemOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.PutItemOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_PutItemRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItemRequest'
type MockDynamoDBI_PutItemRequest_Call struct {
	*mock.Call
}

// PutItemRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.PutItemInput
func (_e *MockDynamoDBI_Expecter) PutItemRequest(_a0 interface{}) *MockDynamoDBI_PutItemRequest_Call {
	return &MockDynamoDBI_PutItemRequest_Call{Call: _e.mock.On("PutItemRequest", _a0)}
}

func (_c *MockDynamoDBI_PutItemRequest_Call) Run(run func(_a0 *dynamodb.PutItemInput)) *MockDynamoDBI_PutItemRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.PutItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_PutItemRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.PutItemOutput) *MockDynamoDBI_PutItemRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_PutItemRequest_Call) RunAndReturn(run func(*dynamodb.PutItemInput) (*request.Request, *dynamodb.PutItemOutput)) *MockDynamoDBI_PutItemRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutItemWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) PutItemWithContext(_a0 context.Context, _a1 *dynamodb.PutItemInput, _a2 ...request.Option) (*dynamodb.PutItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.PutItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.PutItemInput, ...request.Option) (*dynamodb.PutItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.PutItemInput, ...request.Option) *dynamodb.PutItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.PutItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.PutItemInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_PutItemWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItemWithContext'
type MockDynamoDBI_PutItemWithContext_Call struct {
	*mock.Call
}

// PutItemWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.PutItemInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) PutItemWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_PutItemWithContext_Call {
	return &MockDynamoDBI_PutItemWithContext_Call{Call: _e.mock.On("PutItemWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_PutItemWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.PutItemInput, _a2 ...request.Option)) *MockDynamoDBI_PutItemWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.PutItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_PutItemWithContext_Call) Return(_a0 *dynamodb.PutItemOutput, _a1 error) *MockDynamoDBI_PutItemWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_PutItemWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.PutItemInput, ...request.Option) (*dynamodb.PutItemOutput, error)) *MockDynamoDBI_PutItemWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) Query(_a0 *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.QueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput) (*dynamodb.QueryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput) *dynamodb.QueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.QueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.QueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDynamoDBI_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 *dynamodb.QueryInput
func (_e *MockDynamoDBI_Expecter) Query(_a0 interface{}) *MockDynamoDBI_Query_Call {
	return &MockDynamoDBI_Query_Call{Call: _e.mock.On("Query", _a0)}
}

func (_c *MockDynamoDBI_Query_Call) Run(run func(_a0 *dynamodb.QueryInput)) *MockDynamoDBI_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.QueryInput))
	})
	return _c
}

func (_c *MockDynamoDBI_Query_Call) Return(_a0 *dynamodb.QueryOutput, _a1 error) *MockDynamoDBI_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_Query_Call) RunAndReturn(run func(*dynamodb.QueryInput) (*dynamodb.QueryOutput, error)) *MockDynamoDBI_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryPages provides a mock function with given fields: _a0, _a1
func (_m *MockDynamoDBI) QueryPages(_a0 *dynamodb.QueryInput, _a1 func(*dynamodb.QueryOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput, func(*dynamodb.QueryOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_QueryPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryPages'
type MockDynamoDBI_QueryPages_Call struct {
	*mock.Call
}

// QueryPages is a helper method to define mock.On call
//   - _a0 *dynamodb.QueryInput
//   - _a1 func(*dynamodb.QueryOutput , bool) bool
func (_e *MockDynamoDBI_Expecter) QueryPages(_a0 interface{}, _a1 interface{}) *MockDynamoDBI_QueryPages_Call {
	return &MockDynamoDBI_QueryPages_Call{Call: _e.mock.On("QueryPages", _a0, _a1)}
}

func (_c *MockDynamoDBI_QueryPages_Call) Run(run func(_a0 *dynamodb.QueryInput, _a1 func(*dynamodb.QueryOutput, bool) bool)) *MockDynamoDBI_QueryPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.QueryInput), args[1].(func(*dynamodb.QueryOutput, bool) bool))
	})
	return _c
}

func (_c *MockDynamoDBI_QueryPages_Call) Return(_a0 error) *MockDynamoDBI_QueryPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_QueryPages_Call) RunAndReturn(run func(*dynamodb.QueryInput, func(*dynamodb.QueryOutput, bool) bool) error) *MockDynamoDBI_QueryPages_Call {
	_c.Call.Return(run)
	return _c
}

// QueryPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockDynamoDBI) QueryPagesWithContext(_a0 context.Context, _a1 *dynamodb.QueryInput, _a2 func(*dynamodb.QueryOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, func(*dynamodb.QueryOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_QueryPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryPagesWithContext'
type MockDynamoDBI_QueryPagesWithContext_Call struct {
	*mock.Call
}

// QueryPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.QueryInput
//   - _a2 func(*dynamodb.QueryOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockDynamoDBI_Expecter) QueryPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockDynamoDBI_QueryPagesWithContext_Call {
	return &MockDynamoDBI_QueryPagesWithContext_Call{Call: _e.mock.On("QueryPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockDynamoDBI_QueryPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.QueryInput, _a2 func(*dynamodb.QueryOutput, bool) bool, _a3 ...request.Option)) *MockDynamoDBI_QueryPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.QueryInput), args[2].(func(*dynamodb.QueryOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_QueryPagesWithContext_Call) Return(_a0 error) *MockDynamoDBI_QueryPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_QueryPagesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.QueryInput, func(*dynamodb.QueryOutput, bool) bool, ...request.Option) error) *MockDynamoDBI_QueryPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) QueryRequest(_a0 *dynamodb.QueryInput) (*request.Request, *dynamodb.QueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.QueryOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput) (*request.Request, *dynamodb.QueryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.QueryInput) *dynamodb.QueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.QueryOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_QueryRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRequest'
type MockDynamoDBI_QueryRequest_Call struct {
	*mock.Call
}

// QueryRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.QueryInput
func (_e *MockDynamoDBI_Expecter) QueryRequest(_a0 interface{}) *MockDynamoDBI_QueryRequest_Call {
	return &MockDynamoDBI_QueryRequest_Call{Call: _e.mock.On("QueryRequest", _a0)}
}

func (_c *MockDynamoDBI_QueryRequest_Call) Run(run func(_a0 *dynamodb.QueryInput)) *MockDynamoDBI_QueryRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.QueryInput))
	})
	return _c
}

func (_c *MockDynamoDBI_QueryRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.QueryOutput) *MockDynamoDBI_QueryRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_QueryRequest_Call) RunAndReturn(run func(*dynamodb.QueryInput) (*request.Request, *dynamodb.QueryOutput)) *MockDynamoDBI_QueryRequest_Call {
	_c.Call.Return(run)
	return _c
}

// QueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) QueryWithContext(_a0 context.Context, _a1 *dynamodb.QueryInput, _a2 ...request.Option) (*dynamodb.QueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.QueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, ...request.Option) (*dynamodb.QueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, ...request.Option) *dynamodb.QueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.QueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.QueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_QueryWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryWithContext'
type MockDynamoDBI_QueryWithContext_Call struct {
	*mock.Call
}

// QueryWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.QueryInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) QueryWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_QueryWithContext_Call {
	return &MockDynamoDBI_QueryWithContext_Call{Call: _e.mock.On("QueryWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_QueryWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.QueryInput, _a2 ...request.Option)) *MockDynamoDBI_QueryWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.QueryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_QueryWithContext_Call) Return(_a0 *dynamodb.QueryOutput, _a1 error) *MockDynamoDBI_QueryWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_QueryWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.QueryInput, ...request.Option) (*dynamodb.QueryOutput, error)) *MockDynamoDBI_QueryWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreTableFromBackup provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) RestoreTableFromBackup(_a0 *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.RestoreTableFromBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableFromBackupInput) *dynamodb.RestoreTableFromBackupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.RestoreTableFromBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.RestoreTableFromBackupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_RestoreTableFromBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreTableFromBackup'
type MockDynamoDBI_RestoreTableFromBackup_Call struct {
	*mock.Call
}

// RestoreTableFromBackup is a helper method to define mock.On call
//   - _a0 *dynamodb.RestoreTableFromBackupInput
func (_e *MockDynamoDBI_Expecter) RestoreTableFromBackup(_a0 interface{}) *MockDynamoDBI_RestoreTableFromBackup_Call {
	return &MockDynamoDBI_RestoreTableFromBackup_Call{Call: _e.mock.On("RestoreTableFromBackup", _a0)}
}

func (_c *MockDynamoDBI_RestoreTableFromBackup_Call) Run(run func(_a0 *dynamodb.RestoreTableFromBackupInput)) *MockDynamoDBI_RestoreTableFromBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.RestoreTableFromBackupInput))
	})
	return _c
}

func (_c *MockDynamoDBI_RestoreTableFromBackup_Call) Return(_a0 *dynamodb.RestoreTableFromBackupOutput, _a1 error) *MockDynamoDBI_RestoreTableFromBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_RestoreTableFromBackup_Call) RunAndReturn(run func(*dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error)) *MockDynamoDBI_RestoreTableFromBackup_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreTableFromBackupRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) RestoreTableFromBackupRequest(_a0 *dynamodb.RestoreTableFromBackupInput) (*request.Request, *dynamodb.RestoreTableFromBackupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.RestoreTableFromBackupOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableFromBackupInput) (*request.Request, *dynamodb.RestoreTableFromBackupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableFromBackupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.RestoreTableFromBackupInput) *dynamodb.RestoreTableFromBackupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.RestoreTableFromBackupOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_RestoreTableFromBackupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreTableFromBackupRequest'
type MockDynamoDBI_RestoreTableFromBackupRequest_Call struct {
	*mock.Call
}

// RestoreTableFromBackupRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.RestoreTableFromBackupInput
func (_e *MockDynamoDBI_Expecter) RestoreTableFromBackupRequest(_a0 interface{}) *MockDynamoDBI_RestoreTableFromBackupRequest_Call {
	return &MockDynamoDBI_RestoreTableFromBackupRequest_Call{Call: _e.mock.On("RestoreTableFromBackupRequest", _a0)}
}

func (_c *MockDynamoDBI_RestoreTableFromBackupRequest_Call) Run(run func(_a0 *dynamodb.RestoreTableFromBackupInput)) *MockDynamoDBI_RestoreTableFromBackupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.RestoreTableFromBackupInput))
	})
	return _c
}

func (_c *MockDynamoDBI_RestoreTableFromBackupRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.RestoreTableFromBackupOutput) *MockDynamoDBI_RestoreTableFromBackupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_RestoreTableFromBackupRequest_Call) RunAndReturn(run func(*dynamodb.RestoreTableFromBackupInput) (*request.Request, *dynamodb.RestoreTableFromBackupOutput)) *MockDynamoDBI_RestoreTableFromBackupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreTableFromBackupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) RestoreTableFromBackupWithContext(_a0 context.Context, _a1 *dynamodb.RestoreTableFromBackupInput, _a2 ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.RestoreTableFromBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.RestoreTableFromBackupInput, ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.RestoreTableFromBackupInput, ...request.Option) *dynamodb.RestoreTableFromBackupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.RestoreTableFromBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.RestoreTableFromBackupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_RestoreTableFromBackupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreTableFromBackupWithContext'
type MockDynamoDBI_RestoreTableFromBackupWithContext_Call struct {
	*mock.Call
}

// RestoreTableFromBackupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.RestoreTableFromBackupInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) RestoreTableFromBackupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_RestoreTableFromBackupWithContext_Call {
	return &MockDynamoDBI_RestoreTableFromBackupWithContext_Call{Call: _e.mock.On("RestoreTableFromBackupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_RestoreTableFromBackupWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.RestoreTableFromBackupInput, _a2 ...request.Option)) *MockDynamoDBI_RestoreTableFromBackupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.RestoreTableFromBackupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_RestoreTableFromBackupWithContext_Call) Return(_a0 *dynamodb.RestoreTableFromBackupOutput, _a1 error) *MockDynamoDBI_RestoreTableFromBackupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_RestoreTableFromBackupWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.RestoreTableFromBackupInput, ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error)) *MockDynamoDBI_RestoreTableFromBackupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreTableToPointInTime provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) RestoreTableToPointInTime(_a0 *dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.RestoreTableToPointInTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableToPointInTimeInput) *dynamodb.RestoreTableToPointInTimeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.RestoreTableToPointInTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.RestoreTableToPointInTimeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_RestoreTableToPointInTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreTableToPointInTime'
type MockDynamoDBI_RestoreTableToPointInTime_Call struct {
	*mock.Call
}

// RestoreTableToPointInTime is a helper method to define mock.On call
//   - _a0 *dynamodb.RestoreTableToPointInTimeInput
func (_e *MockDynamoDBI_Expecter) RestoreTableToPointInTime(_a0 interface{}) *MockDynamoDBI_RestoreTableToPointInTime_Call {
	return &MockDynamoDBI_RestoreTableToPointInTime_Call{Call: _e.mock.On("RestoreTableToPointInTime", _a0)}
}

func (_c *MockDynamoDBI_RestoreTableToPointInTime_Call) Run(run func(_a0 *dynamodb.RestoreTableToPointInTimeInput)) *MockDynamoDBI_RestoreTableToPointInTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.RestoreTableToPointInTimeInput))
	})
	return _c
}

func (_c *MockDynamoDBI_RestoreTableToPointInTime_Call) Return(_a0 *dynamodb.RestoreTableToPointInTimeOutput, _a1 error) *MockDynamoDBI_RestoreTableToPointInTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_RestoreTableToPointInTime_Call) RunAndReturn(run func(*dynamodb.RestoreTableToPointInTimeInput) (*dynamodb.RestoreTableToPointInTimeOutput, error)) *MockDynamoDBI_RestoreTableToPointInTime_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreTableToPointInTimeRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) RestoreTableToPointInTimeRequest(_a0 *dynamodb.RestoreTableToPointInTimeInput) (*request.Request, *dynamodb.RestoreTableToPointInTimeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.RestoreTableToPointInTimeOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableToPointInTimeInput) (*request.Request, *dynamodb.RestoreTableToPointInTimeOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.RestoreTableToPointInTimeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.RestoreTableToPointInTimeInput) *dynamodb.RestoreTableToPointInTimeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.RestoreTableToPointInTimeOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_RestoreTableToPointInTimeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreTableToPointInTimeRequest'
type MockDynamoDBI_RestoreTableToPointInTimeRequest_Call struct {
	*mock.Call
}

// RestoreTableToPointInTimeRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.RestoreTableToPointInTimeInput
func (_e *MockDynamoDBI_Expecter) RestoreTableToPointInTimeRequest(_a0 interface{}) *MockDynamoDBI_RestoreTableToPointInTimeRequest_Call {
	return &MockDynamoDBI_RestoreTableToPointInTimeRequest_Call{Call: _e.mock.On("RestoreTableToPointInTimeRequest", _a0)}
}

func (_c *MockDynamoDBI_RestoreTableToPointInTimeRequest_Call) Run(run func(_a0 *dynamodb.RestoreTableToPointInTimeInput)) *MockDynamoDBI_RestoreTableToPointInTimeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.RestoreTableToPointInTimeInput))
	})
	return _c
}

func (_c *MockDynamoDBI_RestoreTableToPointInTimeRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.RestoreTableToPointInTimeOutput) *MockDynamoDBI_RestoreTableToPointInTimeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_RestoreTableToPointInTimeRequest_Call) RunAndReturn(run func(*dynamodb.RestoreTableToPointInTimeInput) (*request.Request, *dynamodb.RestoreTableToPointInTimeOutput)) *MockDynamoDBI_RestoreTableToPointInTimeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreTableToPointInTimeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) RestoreTableToPointInTimeWithContext(_a0 context.Context, _a1 *dynamodb.RestoreTableToPointInTimeInput, _a2 ...request.Option) (*dynamodb.RestoreTableToPointInTimeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.RestoreTableToPointInTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.RestoreTableToPointInTimeInput, ...request.Option) (*dynamodb.RestoreTableToPointInTimeOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.RestoreTableToPointInTimeInput, ...request.Option) *dynamodb.RestoreTableToPointInTimeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.RestoreTableToPointInTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.RestoreTableToPointInTimeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreTableToPointInTimeWithContext'
type MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call struct {
	*mock.Call
}

// RestoreTableToPointInTimeWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.RestoreTableToPointInTimeInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) RestoreTableToPointInTimeWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call {
	return &MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call{Call: _e.mock.On("RestoreTableToPointInTimeWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.RestoreTableToPointInTimeInput, _a2 ...request.Option)) *MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.RestoreTableToPointInTimeInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call) Return(_a0 *dynamodb.RestoreTableToPointInTimeOutput, _a1 error) *MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.RestoreTableToPointInTimeInput, ...request.Option) (*dynamodb.RestoreTableToPointInTimeOutput, error)) *MockDynamoDBI_RestoreTableToPointInTimeWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) Scan(_a0 *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.ScanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ScanInput) (*dynamodb.ScanOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ScanInput) *dynamodb.ScanOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ScanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ScanInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockDynamoDBI_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - _a0 *dynamodb.ScanInput
func (_e *MockDynamoDBI_Expecter) Scan(_a0 interface{}) *MockDynamoDBI_Scan_Call {
	return &MockDynamoDBI_Scan_Call{Call: _e.mock.On("Scan", _a0)}
}

func (_c *MockDynamoDBI_Scan_Call) Run(run func(_a0 *dynamodb.ScanInput)) *MockDynamoDBI_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ScanInput))
	})
	return _c
}

func (_c *MockDynamoDBI_Scan_Call) Return(_a0 *dynamodb.ScanOutput, _a1 error) *MockDynamoDBI_Scan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_Scan_Call) RunAndReturn(run func(*dynamodb.ScanInput) (*dynamodb.ScanOutput, error)) *MockDynamoDBI_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// ScanPages provides a mock function with given fields: _a0, _a1
func (_m *MockDynamoDBI) ScanPages(_a0 *dynamodb.ScanInput, _a1 func(*dynamodb.ScanOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.ScanInput, func(*dynamodb.ScanOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ScanPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanPages'
type MockDynamoDBI_ScanPages_Call struct {
	*mock.Call
}

// ScanPages is a helper method to define mock.On call
//   - _a0 *dynamodb.ScanInput
//   - _a1 func(*dynamodb.ScanOutput , bool) bool
func (_e *MockDynamoDBI_Expecter) ScanPages(_a0 interface{}, _a1 interface{}) *MockDynamoDBI_ScanPages_Call {
	return &MockDynamoDBI_ScanPages_Call{Call: _e.mock.On("ScanPages", _a0, _a1)}
}

func (_c *MockDynamoDBI_ScanPages_Call) Run(run func(_a0 *dynamodb.ScanInput, _a1 func(*dynamodb.ScanOutput, bool) bool)) *MockDynamoDBI_ScanPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ScanInput), args[1].(func(*dynamodb.ScanOutput, bool) bool))
	})
	return _c
}

func (_c *MockDynamoDBI_ScanPages_Call) Return(_a0 error) *MockDynamoDBI_ScanPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ScanPages_Call) RunAndReturn(run func(*dynamodb.ScanInput, func(*dynamodb.ScanOutput, bool) bool) error) *MockDynamoDBI_ScanPages_Call {
	_c.Call.Return(run)
	return _c
}

// ScanPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockDynamoDBI) ScanPagesWithContext(_a0 context.Context, _a1 *dynamodb.ScanInput, _a2 func(*dynamodb.ScanOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ScanInput, func(*dynamodb.ScanOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_ScanPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanPagesWithContext'
type MockDynamoDBI_ScanPagesWithContext_Call struct {
	*mock.Call
}

// ScanPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ScanInput
//   - _a2 func(*dynamodb.ScanOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockDynamoDBI_Expecter) ScanPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockDynamoDBI_ScanPagesWithContext_Call {
	return &MockDynamoDBI_ScanPagesWithContext_Call{Call: _e.mock.On("ScanPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockDynamoDBI_ScanPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ScanInput, _a2 func(*dynamodb.ScanOutput, bool) bool, _a3 ...request.Option)) *MockDynamoDBI_ScanPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ScanInput), args[2].(func(*dynamodb.ScanOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ScanPagesWithContext_Call) Return(_a0 error) *MockDynamoDBI_ScanPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_ScanPagesWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ScanInput, func(*dynamodb.ScanOutput, bool) bool, ...request.Option) error) *MockDynamoDBI_ScanPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ScanRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) ScanRequest(_a0 *dynamodb.ScanInput) (*request.Request, *dynamodb.ScanOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.ScanOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.ScanInput) (*request.Request, *dynamodb.ScanOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.ScanInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.ScanInput) *dynamodb.ScanOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.ScanOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_ScanRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanRequest'
type MockDynamoDBI_ScanRequest_Call struct {
	*mock.Call
}

// ScanRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.ScanInput
func (_e *MockDynamoDBI_Expecter) ScanRequest(_a0 interface{}) *MockDynamoDBI_ScanRequest_Call {
	return &MockDynamoDBI_ScanRequest_Call{Call: _e.mock.On("ScanRequest", _a0)}
}

func (_c *MockDynamoDBI_ScanRequest_Call) Run(run func(_a0 *dynamodb.ScanInput)) *MockDynamoDBI_ScanRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.ScanInput))
	})
	return _c
}

func (_c *MockDynamoDBI_ScanRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.ScanOutput) *MockDynamoDBI_ScanRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ScanRequest_Call) RunAndReturn(run func(*dynamodb.ScanInput) (*request.Request, *dynamodb.ScanOutput)) *MockDynamoDBI_ScanRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ScanWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) ScanWithContext(_a0 context.Context, _a1 *dynamodb.ScanInput, _a2 ...request.Option) (*dynamodb.ScanOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.ScanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ScanInput, ...request.Option) (*dynamodb.ScanOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.ScanInput, ...request.Option) *dynamodb.ScanOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ScanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.ScanInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_ScanWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanWithContext'
type MockDynamoDBI_ScanWithContext_Call struct {
	*mock.Call
}

// ScanWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.ScanInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) ScanWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_ScanWithContext_Call {
	return &MockDynamoDBI_ScanWithContext_Call{Call: _e.mock.On("ScanWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_ScanWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.ScanInput, _a2 ...request.Option)) *MockDynamoDBI_ScanWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.ScanInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_ScanWithContext_Call) Return(_a0 *dynamodb.ScanOutput, _a1 error) *MockDynamoDBI_ScanWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_ScanWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.ScanInput, ...request.Option) (*dynamodb.ScanOutput, error)) *MockDynamoDBI_ScanWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagResource provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) TagResource(_a0 *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.TagResourceInput) *dynamodb.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_TagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResource'
type MockDynamoDBI_TagResource_Call struct {
	*mock.Call
}

// TagResource is a helper method to define mock.On call
//   - _a0 *dynamodb.TagResourceInput
func (_e *MockDynamoDBI_Expecter) TagResource(_a0 interface{}) *MockDynamoDBI_TagResource_Call {
	return &MockDynamoDBI_TagResource_Call{Call: _e.mock.On("TagResource", _a0)}
}

func (_c *MockDynamoDBI_TagResource_Call) Run(run func(_a0 *dynamodb.TagResourceInput)) *MockDynamoDBI_TagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.TagResourceInput))
	})
	return _c
}

func (_c *MockDynamoDBI_TagResource_Call) Return(_a0 *dynamodb.TagResourceOutput, _a1 error) *MockDynamoDBI_TagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TagResource_Call) RunAndReturn(run func(*dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error)) *MockDynamoDBI_TagResource_Call {
	_c.Call.Return(run)
	return _c
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) TagResourceRequest(_a0 *dynamodb.TagResourceInput) (*request.Request, *dynamodb.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.TagResourceInput) (*request.Request, *dynamodb.TagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.TagResourceInput) *dynamodb.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.TagResourceOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_TagResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResourceRequest'
type MockDynamoDBI_TagResourceRequest_Call struct {
	*mock.Call
}

// TagResourceRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.TagResourceInput
func (_e *MockDynamoDBI_Expecter) TagResourceRequest(_a0 interface{}) *MockDynamoDBI_TagResourceRequest_Call {
	return &MockDynamoDBI_TagResourceRequest_Call{Call: _e.mock.On("TagResourceRequest", _a0)}
}

func (_c *MockDynamoDBI_TagResourceRequest_Call) Run(run func(_a0 *dynamodb.TagResourceInput)) *MockDynamoDBI_TagResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.TagResourceInput))
	})
	return _c
}

func (_c *MockDynamoDBI_TagResourceRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.TagResourceOutput) *MockDynamoDBI_TagResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TagResourceRequest_Call) RunAndReturn(run func(*dynamodb.TagResourceInput) (*request.Request, *dynamodb.TagResourceOutput)) *MockDynamoDBI_TagResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) TagResourceWithContext(_a0 context.Context, _a1 *dynamodb.TagResourceInput, _a2 ...request.Option) (*dynamodb.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.TagResourceInput, ...request.Option) (*dynamodb.TagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.TagResourceInput, ...request.Option) *dynamodb.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_TagResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResourceWithContext'
type MockDynamoDBI_TagResourceWithContext_Call struct {
	*mock.Call
}

// TagResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.TagResourceInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) TagResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_TagResourceWithContext_Call {
	return &MockDynamoDBI_TagResourceWithContext_Call{Call: _e.mock.On("TagResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_TagResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.TagResourceInput, _a2 ...request.Option)) *MockDynamoDBI_TagResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.TagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_TagResourceWithContext_Call) Return(_a0 *dynamodb.TagResourceOutput, _a1 error) *MockDynamoDBI_TagResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TagResourceWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.TagResourceInput, ...request.Option) (*dynamodb.TagResourceOutput, error)) *MockDynamoDBI_TagResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TransactGetItems provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) TransactGetItems(_a0 *dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.TransactGetItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactGetItemsInput) *dynamodb.TransactGetItemsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.TransactGetItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.TransactGetItemsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_TransactGetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactGetItems'
type MockDynamoDBI_TransactGetItems_Call struct {
	*mock.Call
}

// TransactGetItems is a helper method to define mock.On call
//   - _a0 *dynamodb.TransactGetItemsInput
func (_e *MockDynamoDBI_Expecter) TransactGetItems(_a0 interface{}) *MockDynamoDBI_TransactGetItems_Call {
	return &MockDynamoDBI_TransactGetItems_Call{Call: _e.mock.On("TransactGetItems", _a0)}
}

func (_c *MockDynamoDBI_TransactGetItems_Call) Run(run func(_a0 *dynamodb.TransactGetItemsInput)) *MockDynamoDBI_TransactGetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.TransactGetItemsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_TransactGetItems_Call) Return(_a0 *dynamodb.TransactGetItemsOutput, _a1 error) *MockDynamoDBI_TransactGetItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TransactGetItems_Call) RunAndReturn(run func(*dynamodb.TransactGetItemsInput) (*dynamodb.TransactGetItemsOutput, error)) *MockDynamoDBI_TransactGetItems_Call {
	_c.Call.Return(run)
	return _c
}

// TransactGetItemsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) TransactGetItemsRequest(_a0 *dynamodb.TransactGetItemsInput) (*request.Request, *dynamodb.TransactGetItemsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.TransactGetItemsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactGetItemsInput) (*request.Request, *dynamodb.TransactGetItemsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactGetItemsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.TransactGetItemsInput) *dynamodb.TransactGetItemsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.TransactGetItemsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_TransactGetItemsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactGetItemsRequest'
type MockDynamoDBI_TransactGetItemsRequest_Call struct {
	*mock.Call
}

// TransactGetItemsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.TransactGetItemsInput
func (_e *MockDynamoDBI_Expecter) TransactGetItemsRequest(_a0 interface{}) *MockDynamoDBI_TransactGetItemsRequest_Call {
	return &MockDynamoDBI_TransactGetItemsRequest_Call{Call: _e.mock.On("TransactGetItemsRequest", _a0)}
}

func (_c *MockDynamoDBI_TransactGetItemsRequest_Call) Run(run func(_a0 *dynamodb.TransactGetItemsInput)) *MockDynamoDBI_TransactGetItemsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.TransactGetItemsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_TransactGetItemsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.TransactGetItemsOutput) *MockDynamoDBI_TransactGetItemsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TransactGetItemsRequest_Call) RunAndReturn(run func(*dynamodb.TransactGetItemsInput) (*request.Request, *dynamodb.TransactGetItemsOutput)) *MockDynamoDBI_TransactGetItemsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TransactGetItemsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) TransactGetItemsWithContext(_a0 context.Context, _a1 *dynamodb.TransactGetItemsInput, _a2 ...request.Option) (*dynamodb.TransactGetItemsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.TransactGetItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.TransactGetItemsInput, ...request.Option) (*dynamodb.TransactGetItemsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.TransactGetItemsInput, ...request.Option) *dynamodb.TransactGetItemsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.TransactGetItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.TransactGetItemsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_TransactGetItemsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactGetItemsWithContext'
type MockDynamoDBI_TransactGetItemsWithContext_Call struct {
	*mock.Call
}

// TransactGetItemsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.TransactGetItemsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) TransactGetItemsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_TransactGetItemsWithContext_Call {
	return &MockDynamoDBI_TransactGetItemsWithContext_Call{Call: _e.mock.On("TransactGetItemsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_TransactGetItemsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.TransactGetItemsInput, _a2 ...request.Option)) *MockDynamoDBI_TransactGetItemsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.TransactGetItemsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_TransactGetItemsWithContext_Call) Return(_a0 *dynamodb.TransactGetItemsOutput, _a1 error) *MockDynamoDBI_TransactGetItemsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TransactGetItemsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.TransactGetItemsInput, ...request.Option) (*dynamodb.TransactGetItemsOutput, error)) *MockDynamoDBI_TransactGetItemsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TransactWriteItems provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) TransactWriteItems(_a0 *dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.TransactWriteItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactWriteItemsInput) *dynamodb.TransactWriteItemsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.TransactWriteItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.TransactWriteItemsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_TransactWriteItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactWriteItems'
type MockDynamoDBI_TransactWriteItems_Call struct {
	*mock.Call
}

// TransactWriteItems is a helper method to define mock.On call
//   - _a0 *dynamodb.TransactWriteItemsInput
func (_e *MockDynamoDBI_Expecter) TransactWriteItems(_a0 interface{}) *MockDynamoDBI_TransactWriteItems_Call {
	return &MockDynamoDBI_TransactWriteItems_Call{Call: _e.mock.On("TransactWriteItems", _a0)}
}

func (_c *MockDynamoDBI_TransactWriteItems_Call) Run(run func(_a0 *dynamodb.TransactWriteItemsInput)) *MockDynamoDBI_TransactWriteItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.TransactWriteItemsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_TransactWriteItems_Call) Return(_a0 *dynamodb.TransactWriteItemsOutput, _a1 error) *MockDynamoDBI_TransactWriteItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TransactWriteItems_Call) RunAndReturn(run func(*dynamodb.TransactWriteItemsInput) (*dynamodb.TransactWriteItemsOutput, error)) *MockDynamoDBI_TransactWriteItems_Call {
	_c.Call.Return(run)
	return _c
}

// TransactWriteItemsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) TransactWriteItemsRequest(_a0 *dynamodb.TransactWriteItemsInput) (*request.Request, *dynamodb.TransactWriteItemsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.TransactWriteItemsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactWriteItemsInput) (*request.Request, *dynamodb.TransactWriteItemsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.TransactWriteItemsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.TransactWriteItemsInput) *dynamodb.TransactWriteItemsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.TransactWriteItemsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_TransactWriteItemsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactWriteItemsRequest'
type MockDynamoDBI_TransactWriteItemsRequest_Call struct {
	*mock.Call
}

// TransactWriteItemsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.TransactWriteItemsInput
func (_e *MockDynamoDBI_Expecter) TransactWriteItemsRequest(_a0 interface{}) *MockDynamoDBI_TransactWriteItemsRequest_Call {
	return &MockDynamoDBI_TransactWriteItemsRequest_Call{Call: _e.mock.On("TransactWriteItemsRequest", _a0)}
}

func (_c *MockDynamoDBI_TransactWriteItemsRequest_Call) Run(run func(_a0 *dynamodb.TransactWriteItemsInput)) *MockDynamoDBI_TransactWriteItemsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.TransactWriteItemsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_TransactWriteItemsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.TransactWriteItemsOutput) *MockDynamoDBI_TransactWriteItemsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TransactWriteItemsRequest_Call) RunAndReturn(run func(*dynamodb.TransactWriteItemsInput) (*request.Request, *dynamodb.TransactWriteItemsOutput)) *MockDynamoDBI_TransactWriteItemsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TransactWriteItemsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) TransactWriteItemsWithContext(_a0 context.Context, _a1 *dynamodb.TransactWriteItemsInput, _a2 ...request.Option) (*dynamodb.TransactWriteItemsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.TransactWriteItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.TransactWriteItemsInput, ...request.Option) (*dynamodb.TransactWriteItemsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.TransactWriteItemsInput, ...request.Option) *dynamodb.TransactWriteItemsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.TransactWriteItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.TransactWriteItemsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_TransactWriteItemsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactWriteItemsWithContext'
type MockDynamoDBI_TransactWriteItemsWithContext_Call struct {
	*mock.Call
}

// TransactWriteItemsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.TransactWriteItemsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) TransactWriteItemsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_TransactWriteItemsWithContext_Call {
	return &MockDynamoDBI_TransactWriteItemsWithContext_Call{Call: _e.mock.On("TransactWriteItemsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_TransactWriteItemsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.TransactWriteItemsInput, _a2 ...request.Option)) *MockDynamoDBI_TransactWriteItemsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.TransactWriteItemsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_TransactWriteItemsWithContext_Call) Return(_a0 *dynamodb.TransactWriteItemsOutput, _a1 error) *MockDynamoDBI_TransactWriteItemsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_TransactWriteItemsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.TransactWriteItemsInput, ...request.Option) (*dynamodb.TransactWriteItemsOutput, error)) *MockDynamoDBI_TransactWriteItemsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResource provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UntagResource(_a0 *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UntagResourceInput) *dynamodb.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UntagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResource'
type MockDynamoDBI_UntagResource_Call struct {
	*mock.Call
}

// UntagResource is a helper method to define mock.On call
//   - _a0 *dynamodb.UntagResourceInput
func (_e *MockDynamoDBI_Expecter) UntagResource(_a0 interface{}) *MockDynamoDBI_UntagResource_Call {
	return &MockDynamoDBI_UntagResource_Call{Call: _e.mock.On("UntagResource", _a0)}
}

func (_c *MockDynamoDBI_UntagResource_Call) Run(run func(_a0 *dynamodb.UntagResourceInput)) *MockDynamoDBI_UntagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UntagResourceInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UntagResource_Call) Return(_a0 *dynamodb.UntagResourceOutput, _a1 error) *MockDynamoDBI_UntagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UntagResource_Call) RunAndReturn(run func(*dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error)) *MockDynamoDBI_UntagResource_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UntagResourceRequest(_a0 *dynamodb.UntagResourceInput) (*request.Request, *dynamodb.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UntagResourceInput) (*request.Request, *dynamodb.UntagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UntagResourceInput) *dynamodb.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UntagResourceOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UntagResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResourceRequest'
type MockDynamoDBI_UntagResourceRequest_Call struct {
	*mock.Call
}

// UntagResourceRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UntagResourceInput
func (_e *MockDynamoDBI_Expecter) UntagResourceRequest(_a0 interface{}) *MockDynamoDBI_UntagResourceRequest_Call {
	return &MockDynamoDBI_UntagResourceRequest_Call{Call: _e.mock.On("UntagResourceRequest", _a0)}
}

func (_c *MockDynamoDBI_UntagResourceRequest_Call) Run(run func(_a0 *dynamodb.UntagResourceInput)) *MockDynamoDBI_UntagResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UntagResourceInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UntagResourceRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UntagResourceOutput) *MockDynamoDBI_UntagResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UntagResourceRequest_Call) RunAndReturn(run func(*dynamodb.UntagResourceInput) (*request.Request, *dynamodb.UntagResourceOutput)) *MockDynamoDBI_UntagResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UntagResourceWithContext(_a0 context.Context, _a1 *dynamodb.UntagResourceInput, _a2 ...request.Option) (*dynamodb.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UntagResourceInput, ...request.Option) (*dynamodb.UntagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UntagResourceInput, ...request.Option) *dynamodb.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UntagResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResourceWithContext'
type MockDynamoDBI_UntagResourceWithContext_Call struct {
	*mock.Call
}

// UntagResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UntagResourceInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UntagResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UntagResourceWithContext_Call {
	return &MockDynamoDBI_UntagResourceWithContext_Call{Call: _e.mock.On("UntagResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UntagResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UntagResourceInput, _a2 ...request.Option)) *MockDynamoDBI_UntagResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UntagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UntagResourceWithContext_Call) Return(_a0 *dynamodb.UntagResourceOutput, _a1 error) *MockDynamoDBI_UntagResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UntagResourceWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UntagResourceInput, ...request.Option) (*dynamodb.UntagResourceOutput, error)) *MockDynamoDBI_UntagResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContinuousBackups provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateContinuousBackups(_a0 *dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UpdateContinuousBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContinuousBackupsInput) *dynamodb.UpdateContinuousBackupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateContinuousBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateContinuousBackupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateContinuousBackups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContinuousBackups'
type MockDynamoDBI_UpdateContinuousBackups_Call struct {
	*mock.Call
}

// UpdateContinuousBackups is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateContinuousBackupsInput
func (_e *MockDynamoDBI_Expecter) UpdateContinuousBackups(_a0 interface{}) *MockDynamoDBI_UpdateContinuousBackups_Call {
	return &MockDynamoDBI_UpdateContinuousBackups_Call{Call: _e.mock.On("UpdateContinuousBackups", _a0)}
}

func (_c *MockDynamoDBI_UpdateContinuousBackups_Call) Run(run func(_a0 *dynamodb.UpdateContinuousBackupsInput)) *MockDynamoDBI_UpdateContinuousBackups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateContinuousBackupsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateContinuousBackups_Call) Return(_a0 *dynamodb.UpdateContinuousBackupsOutput, _a1 error) *MockDynamoDBI_UpdateContinuousBackups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateContinuousBackups_Call) RunAndReturn(run func(*dynamodb.UpdateContinuousBackupsInput) (*dynamodb.UpdateContinuousBackupsOutput, error)) *MockDynamoDBI_UpdateContinuousBackups_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContinuousBackupsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateContinuousBackupsRequest(_a0 *dynamodb.UpdateContinuousBackupsInput) (*request.Request, *dynamodb.UpdateContinuousBackupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UpdateContinuousBackupsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContinuousBackupsInput) (*request.Request, *dynamodb.UpdateContinuousBackupsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContinuousBackupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateContinuousBackupsInput) *dynamodb.UpdateContinuousBackupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UpdateContinuousBackupsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UpdateContinuousBackupsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContinuousBackupsRequest'
type MockDynamoDBI_UpdateContinuousBackupsRequest_Call struct {
	*mock.Call
}

// UpdateContinuousBackupsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateContinuousBackupsInput
func (_e *MockDynamoDBI_Expecter) UpdateContinuousBackupsRequest(_a0 interface{}) *MockDynamoDBI_UpdateContinuousBackupsRequest_Call {
	return &MockDynamoDBI_UpdateContinuousBackupsRequest_Call{Call: _e.mock.On("UpdateContinuousBackupsRequest", _a0)}
}

func (_c *MockDynamoDBI_UpdateContinuousBackupsRequest_Call) Run(run func(_a0 *dynamodb.UpdateContinuousBackupsInput)) *MockDynamoDBI_UpdateContinuousBackupsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateContinuousBackupsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateContinuousBackupsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UpdateContinuousBackupsOutput) *MockDynamoDBI_UpdateContinuousBackupsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateContinuousBackupsRequest_Call) RunAndReturn(run func(*dynamodb.UpdateContinuousBackupsInput) (*request.Request, *dynamodb.UpdateContinuousBackupsOutput)) *MockDynamoDBI_UpdateContinuousBackupsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContinuousBackupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UpdateContinuousBackupsWithContext(_a0 context.Context, _a1 *dynamodb.UpdateContinuousBackupsInput, _a2 ...request.Option) (*dynamodb.UpdateContinuousBackupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UpdateContinuousBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateContinuousBackupsInput, ...request.Option) (*dynamodb.UpdateContinuousBackupsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateContinuousBackupsInput, ...request.Option) *dynamodb.UpdateContinuousBackupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateContinuousBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateContinuousBackupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateContinuousBackupsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContinuousBackupsWithContext'
type MockDynamoDBI_UpdateContinuousBackupsWithContext_Call struct {
	*mock.Call
}

// UpdateContinuousBackupsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateContinuousBackupsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UpdateContinuousBackupsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UpdateContinuousBackupsWithContext_Call {
	return &MockDynamoDBI_UpdateContinuousBackupsWithContext_Call{Call: _e.mock.On("UpdateContinuousBackupsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UpdateContinuousBackupsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateContinuousBackupsInput, _a2 ...request.Option)) *MockDynamoDBI_UpdateContinuousBackupsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateContinuousBackupsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateContinuousBackupsWithContext_Call) Return(_a0 *dynamodb.UpdateContinuousBackupsOutput, _a1 error) *MockDynamoDBI_UpdateContinuousBackupsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateContinuousBackupsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateContinuousBackupsInput, ...request.Option) (*dynamodb.UpdateContinuousBackupsOutput, error)) *MockDynamoDBI_UpdateContinuousBackupsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContributorInsights provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateContributorInsights(_a0 *dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UpdateContributorInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContributorInsightsInput) *dynamodb.UpdateContributorInsightsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateContributorInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateContributorInsightsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateContributorInsights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContributorInsights'
type MockDynamoDBI_UpdateContributorInsights_Call struct {
	*mock.Call
}

// UpdateContributorInsights is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateContributorInsightsInput
func (_e *MockDynamoDBI_Expecter) UpdateContributorInsights(_a0 interface{}) *MockDynamoDBI_UpdateContributorInsights_Call {
	return &MockDynamoDBI_UpdateContributorInsights_Call{Call: _e.mock.On("UpdateContributorInsights", _a0)}
}

func (_c *MockDynamoDBI_UpdateContributorInsights_Call) Run(run func(_a0 *dynamodb.UpdateContributorInsightsInput)) *MockDynamoDBI_UpdateContributorInsights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateContributorInsightsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateContributorInsights_Call) Return(_a0 *dynamodb.UpdateContributorInsightsOutput, _a1 error) *MockDynamoDBI_UpdateContributorInsights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateContributorInsights_Call) RunAndReturn(run func(*dynamodb.UpdateContributorInsightsInput) (*dynamodb.UpdateContributorInsightsOutput, error)) *MockDynamoDBI_UpdateContributorInsights_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContributorInsightsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateContributorInsightsRequest(_a0 *dynamodb.UpdateContributorInsightsInput) (*request.Request, *dynamodb.UpdateContributorInsightsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UpdateContributorInsightsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContributorInsightsInput) (*request.Request, *dynamodb.UpdateContributorInsightsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateContributorInsightsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateContributorInsightsInput) *dynamodb.UpdateContributorInsightsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UpdateContributorInsightsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UpdateContributorInsightsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContributorInsightsRequest'
type MockDynamoDBI_UpdateContributorInsightsRequest_Call struct {
	*mock.Call
}

// UpdateContributorInsightsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateContributorInsightsInput
func (_e *MockDynamoDBI_Expecter) UpdateContributorInsightsRequest(_a0 interface{}) *MockDynamoDBI_UpdateContributorInsightsRequest_Call {
	return &MockDynamoDBI_UpdateContributorInsightsRequest_Call{Call: _e.mock.On("UpdateContributorInsightsRequest", _a0)}
}

func (_c *MockDynamoDBI_UpdateContributorInsightsRequest_Call) Run(run func(_a0 *dynamodb.UpdateContributorInsightsInput)) *MockDynamoDBI_UpdateContributorInsightsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateContributorInsightsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateContributorInsightsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UpdateContributorInsightsOutput) *MockDynamoDBI_UpdateContributorInsightsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateContributorInsightsRequest_Call) RunAndReturn(run func(*dynamodb.UpdateContributorInsightsInput) (*request.Request, *dynamodb.UpdateContributorInsightsOutput)) *MockDynamoDBI_UpdateContributorInsightsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContributorInsightsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UpdateContributorInsightsWithContext(_a0 context.Context, _a1 *dynamodb.UpdateContributorInsightsInput, _a2 ...request.Option) (*dynamodb.UpdateContributorInsightsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UpdateContributorInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateContributorInsightsInput, ...request.Option) (*dynamodb.UpdateContributorInsightsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateContributorInsightsInput, ...request.Option) *dynamodb.UpdateContributorInsightsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateContributorInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateContributorInsightsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateContributorInsightsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContributorInsightsWithContext'
type MockDynamoDBI_UpdateContributorInsightsWithContext_Call struct {
	*mock.Call
}

// UpdateContributorInsightsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateContributorInsightsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UpdateContributorInsightsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UpdateContributorInsightsWithContext_Call {
	return &MockDynamoDBI_UpdateContributorInsightsWithContext_Call{Call: _e.mock.On("UpdateContributorInsightsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UpdateContributorInsightsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateContributorInsightsInput, _a2 ...request.Option)) *MockDynamoDBI_UpdateContributorInsightsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateContributorInsightsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateContributorInsightsWithContext_Call) Return(_a0 *dynamodb.UpdateContributorInsightsOutput, _a1 error) *MockDynamoDBI_UpdateContributorInsightsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateContributorInsightsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateContributorInsightsInput, ...request.Option) (*dynamodb.UpdateContributorInsightsOutput, error)) *MockDynamoDBI_UpdateContributorInsightsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGlobalTable provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateGlobalTable(_a0 *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UpdateGlobalTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableInput) *dynamodb.UpdateGlobalTableOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateGlobalTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateGlobalTableInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateGlobalTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGlobalTable'
type MockDynamoDBI_UpdateGlobalTable_Call struct {
	*mock.Call
}

// UpdateGlobalTable is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateGlobalTableInput
func (_e *MockDynamoDBI_Expecter) UpdateGlobalTable(_a0 interface{}) *MockDynamoDBI_UpdateGlobalTable_Call {
	return &MockDynamoDBI_UpdateGlobalTable_Call{Call: _e.mock.On("UpdateGlobalTable", _a0)}
}

func (_c *MockDynamoDBI_UpdateGlobalTable_Call) Run(run func(_a0 *dynamodb.UpdateGlobalTableInput)) *MockDynamoDBI_UpdateGlobalTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateGlobalTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTable_Call) Return(_a0 *dynamodb.UpdateGlobalTableOutput, _a1 error) *MockDynamoDBI_UpdateGlobalTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTable_Call) RunAndReturn(run func(*dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error)) *MockDynamoDBI_UpdateGlobalTable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGlobalTableRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateGlobalTableRequest(_a0 *dynamodb.UpdateGlobalTableInput) (*request.Request, *dynamodb.UpdateGlobalTableOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UpdateGlobalTableOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableInput) (*request.Request, *dynamodb.UpdateGlobalTableOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateGlobalTableInput) *dynamodb.UpdateGlobalTableOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UpdateGlobalTableOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UpdateGlobalTableRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGlobalTableRequest'
type MockDynamoDBI_UpdateGlobalTableRequest_Call struct {
	*mock.Call
}

// UpdateGlobalTableRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateGlobalTableInput
func (_e *MockDynamoDBI_Expecter) UpdateGlobalTableRequest(_a0 interface{}) *MockDynamoDBI_UpdateGlobalTableRequest_Call {
	return &MockDynamoDBI_UpdateGlobalTableRequest_Call{Call: _e.mock.On("UpdateGlobalTableRequest", _a0)}
}

func (_c *MockDynamoDBI_UpdateGlobalTableRequest_Call) Run(run func(_a0 *dynamodb.UpdateGlobalTableInput)) *MockDynamoDBI_UpdateGlobalTableRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateGlobalTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UpdateGlobalTableOutput) *MockDynamoDBI_UpdateGlobalTableRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableRequest_Call) RunAndReturn(run func(*dynamodb.UpdateGlobalTableInput) (*request.Request, *dynamodb.UpdateGlobalTableOutput)) *MockDynamoDBI_UpdateGlobalTableRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGlobalTableSettings provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateGlobalTableSettings(_a0 *dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UpdateGlobalTableSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableSettingsInput) *dynamodb.UpdateGlobalTableSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateGlobalTableSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateGlobalTableSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateGlobalTableSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGlobalTableSettings'
type MockDynamoDBI_UpdateGlobalTableSettings_Call struct {
	*mock.Call
}

// UpdateGlobalTableSettings is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateGlobalTableSettingsInput
func (_e *MockDynamoDBI_Expecter) UpdateGlobalTableSettings(_a0 interface{}) *MockDynamoDBI_UpdateGlobalTableSettings_Call {
	return &MockDynamoDBI_UpdateGlobalTableSettings_Call{Call: _e.mock.On("UpdateGlobalTableSettings", _a0)}
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettings_Call) Run(run func(_a0 *dynamodb.UpdateGlobalTableSettingsInput)) *MockDynamoDBI_UpdateGlobalTableSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateGlobalTableSettingsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettings_Call) Return(_a0 *dynamodb.UpdateGlobalTableSettingsOutput, _a1 error) *MockDynamoDBI_UpdateGlobalTableSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettings_Call) RunAndReturn(run func(*dynamodb.UpdateGlobalTableSettingsInput) (*dynamodb.UpdateGlobalTableSettingsOutput, error)) *MockDynamoDBI_UpdateGlobalTableSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGlobalTableSettingsRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateGlobalTableSettingsRequest(_a0 *dynamodb.UpdateGlobalTableSettingsInput) (*request.Request, *dynamodb.UpdateGlobalTableSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UpdateGlobalTableSettingsOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableSettingsInput) (*request.Request, *dynamodb.UpdateGlobalTableSettingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateGlobalTableSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateGlobalTableSettingsInput) *dynamodb.UpdateGlobalTableSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UpdateGlobalTableSettingsOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGlobalTableSettingsRequest'
type MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call struct {
	*mock.Call
}

// UpdateGlobalTableSettingsRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateGlobalTableSettingsInput
func (_e *MockDynamoDBI_Expecter) UpdateGlobalTableSettingsRequest(_a0 interface{}) *MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call {
	return &MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call{Call: _e.mock.On("UpdateGlobalTableSettingsRequest", _a0)}
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call) Run(run func(_a0 *dynamodb.UpdateGlobalTableSettingsInput)) *MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateGlobalTableSettingsInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UpdateGlobalTableSettingsOutput) *MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call) RunAndReturn(run func(*dynamodb.UpdateGlobalTableSettingsInput) (*request.Request, *dynamodb.UpdateGlobalTableSettingsOutput)) *MockDynamoDBI_UpdateGlobalTableSettingsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGlobalTableSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UpdateGlobalTableSettingsWithContext(_a0 context.Context, _a1 *dynamodb.UpdateGlobalTableSettingsInput, _a2 ...request.Option) (*dynamodb.UpdateGlobalTableSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UpdateGlobalTableSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateGlobalTableSettingsInput, ...request.Option) (*dynamodb.UpdateGlobalTableSettingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateGlobalTableSettingsInput, ...request.Option) *dynamodb.UpdateGlobalTableSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateGlobalTableSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateGlobalTableSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGlobalTableSettingsWithContext'
type MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call struct {
	*mock.Call
}

// UpdateGlobalTableSettingsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateGlobalTableSettingsInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UpdateGlobalTableSettingsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call {
	return &MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call{Call: _e.mock.On("UpdateGlobalTableSettingsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateGlobalTableSettingsInput, _a2 ...request.Option)) *MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateGlobalTableSettingsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call) Return(_a0 *dynamodb.UpdateGlobalTableSettingsOutput, _a1 error) *MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateGlobalTableSettingsInput, ...request.Option) (*dynamodb.UpdateGlobalTableSettingsOutput, error)) *MockDynamoDBI_UpdateGlobalTableSettingsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGlobalTableWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UpdateGlobalTableWithContext(_a0 context.Context, _a1 *dynamodb.UpdateGlobalTableInput, _a2 ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UpdateGlobalTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateGlobalTableInput, ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateGlobalTableInput, ...request.Option) *dynamodb.UpdateGlobalTableOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateGlobalTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateGlobalTableInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateGlobalTableWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGlobalTableWithContext'
type MockDynamoDBI_UpdateGlobalTableWithContext_Call struct {
	*mock.Call
}

// UpdateGlobalTableWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateGlobalTableInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UpdateGlobalTableWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UpdateGlobalTableWithContext_Call {
	return &MockDynamoDBI_UpdateGlobalTableWithContext_Call{Call: _e.mock.On("UpdateGlobalTableWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UpdateGlobalTableWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateGlobalTableInput, _a2 ...request.Option)) *MockDynamoDBI_UpdateGlobalTableWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateGlobalTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableWithContext_Call) Return(_a0 *dynamodb.UpdateGlobalTableOutput, _a1 error) *MockDynamoDBI_UpdateGlobalTableWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateGlobalTableWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateGlobalTableInput, ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error)) *MockDynamoDBI_UpdateGlobalTableWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItem provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateItem(_a0 *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UpdateItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateItemInput) *dynamodb.UpdateItemOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateItemInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItem'
type MockDynamoDBI_UpdateItem_Call struct {
	*mock.Call
}

// UpdateItem is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateItemInput
func (_e *MockDynamoDBI_Expecter) UpdateItem(_a0 interface{}) *MockDynamoDBI_UpdateItem_Call {
	return &MockDynamoDBI_UpdateItem_Call{Call: _e.mock.On("UpdateItem", _a0)}
}

func (_c *MockDynamoDBI_UpdateItem_Call) Run(run func(_a0 *dynamodb.UpdateItemInput)) *MockDynamoDBI_UpdateItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateItem_Call) Return(_a0 *dynamodb.UpdateItemOutput, _a1 error) *MockDynamoDBI_UpdateItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateItem_Call) RunAndReturn(run func(*dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error)) *MockDynamoDBI_UpdateItem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItemRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateItemRequest(_a0 *dynamodb.UpdateItemInput) (*request.Request, *dynamodb.UpdateItemOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UpdateItemOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateItemInput) (*request.Request, *dynamodb.UpdateItemOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateItemInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateItemInput) *dynamodb.UpdateItemOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UpdateItemOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UpdateItemRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItemRequest'
type MockDynamoDBI_UpdateItemRequest_Call struct {
	*mock.Call
}

// UpdateItemRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateItemInput
func (_e *MockDynamoDBI_Expecter) UpdateItemRequest(_a0 interface{}) *MockDynamoDBI_UpdateItemRequest_Call {
	return &MockDynamoDBI_UpdateItemRequest_Call{Call: _e.mock.On("UpdateItemRequest", _a0)}
}

func (_c *MockDynamoDBI_UpdateItemRequest_Call) Run(run func(_a0 *dynamodb.UpdateItemInput)) *MockDynamoDBI_UpdateItemRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateItemInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateItemRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UpdateItemOutput) *MockDynamoDBI_UpdateItemRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateItemRequest_Call) RunAndReturn(run func(*dynamodb.UpdateItemInput) (*request.Request, *dynamodb.UpdateItemOutput)) *MockDynamoDBI_UpdateItemRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItemWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UpdateItemWithContext(_a0 context.Context, _a1 *dynamodb.UpdateItemInput, _a2 ...request.Option) (*dynamodb.UpdateItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UpdateItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateItemInput, ...request.Option) (*dynamodb.UpdateItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateItemInput, ...request.Option) *dynamodb.UpdateItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateItemInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateItemWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItemWithContext'
type MockDynamoDBI_UpdateItemWithContext_Call struct {
	*mock.Call
}

// UpdateItemWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateItemInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UpdateItemWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UpdateItemWithContext_Call {
	return &MockDynamoDBI_UpdateItemWithContext_Call{Call: _e.mock.On("UpdateItemWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UpdateItemWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateItemInput, _a2 ...request.Option)) *MockDynamoDBI_UpdateItemWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateItemWithContext_Call) Return(_a0 *dynamodb.UpdateItemOutput, _a1 error) *MockDynamoDBI_UpdateItemWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateItemWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateItemInput, ...request.Option) (*dynamodb.UpdateItemOutput, error)) *MockDynamoDBI_UpdateItemWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTable provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateTable(_a0 *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UpdateTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableInput) *dynamodb.UpdateTableOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateTableInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTable'
type MockDynamoDBI_UpdateTable_Call struct {
	*mock.Call
}

// UpdateTable is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateTableInput
func (_e *MockDynamoDBI_Expecter) UpdateTable(_a0 interface{}) *MockDynamoDBI_UpdateTable_Call {
	return &MockDynamoDBI_UpdateTable_Call{Call: _e.mock.On("UpdateTable", _a0)}
}

func (_c *MockDynamoDBI_UpdateTable_Call) Run(run func(_a0 *dynamodb.UpdateTableInput)) *MockDynamoDBI_UpdateTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTable_Call) Return(_a0 *dynamodb.UpdateTableOutput, _a1 error) *MockDynamoDBI_UpdateTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTable_Call) RunAndReturn(run func(*dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error)) *MockDynamoDBI_UpdateTable_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTableReplicaAutoScaling provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateTableReplicaAutoScaling(_a0 *dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UpdateTableReplicaAutoScalingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableReplicaAutoScalingInput) *dynamodb.UpdateTableReplicaAutoScalingOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateTableReplicaAutoScalingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateTableReplicaAutoScalingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTableReplicaAutoScaling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTableReplicaAutoScaling'
type MockDynamoDBI_UpdateTableReplicaAutoScaling_Call struct {
	*mock.Call
}

// UpdateTableReplicaAutoScaling is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateTableReplicaAutoScalingInput
func (_e *MockDynamoDBI_Expecter) UpdateTableReplicaAutoScaling(_a0 interface{}) *MockDynamoDBI_UpdateTableReplicaAutoScaling_Call {
	return &MockDynamoDBI_UpdateTableReplicaAutoScaling_Call{Call: _e.mock.On("UpdateTableReplicaAutoScaling", _a0)}
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScaling_Call) Run(run func(_a0 *dynamodb.UpdateTableReplicaAutoScalingInput)) *MockDynamoDBI_UpdateTableReplicaAutoScaling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateTableReplicaAutoScalingInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScaling_Call) Return(_a0 *dynamodb.UpdateTableReplicaAutoScalingOutput, _a1 error) *MockDynamoDBI_UpdateTableReplicaAutoScaling_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScaling_Call) RunAndReturn(run func(*dynamodb.UpdateTableReplicaAutoScalingInput) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error)) *MockDynamoDBI_UpdateTableReplicaAutoScaling_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTableReplicaAutoScalingRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateTableReplicaAutoScalingRequest(_a0 *dynamodb.UpdateTableReplicaAutoScalingInput) (*request.Request, *dynamodb.UpdateTableReplicaAutoScalingOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UpdateTableReplicaAutoScalingOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableReplicaAutoScalingInput) (*request.Request, *dynamodb.UpdateTableReplicaAutoScalingOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableReplicaAutoScalingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateTableReplicaAutoScalingInput) *dynamodb.UpdateTableReplicaAutoScalingOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UpdateTableReplicaAutoScalingOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTableReplicaAutoScalingRequest'
type MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call struct {
	*mock.Call
}

// UpdateTableReplicaAutoScalingRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateTableReplicaAutoScalingInput
func (_e *MockDynamoDBI_Expecter) UpdateTableReplicaAutoScalingRequest(_a0 interface{}) *MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call {
	return &MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call{Call: _e.mock.On("UpdateTableReplicaAutoScalingRequest", _a0)}
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call) Run(run func(_a0 *dynamodb.UpdateTableReplicaAutoScalingInput)) *MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateTableReplicaAutoScalingInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UpdateTableReplicaAutoScalingOutput) *MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call) RunAndReturn(run func(*dynamodb.UpdateTableReplicaAutoScalingInput) (*request.Request, *dynamodb.UpdateTableReplicaAutoScalingOutput)) *MockDynamoDBI_UpdateTableReplicaAutoScalingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTableReplicaAutoScalingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UpdateTableReplicaAutoScalingWithContext(_a0 context.Context, _a1 *dynamodb.UpdateTableReplicaAutoScalingInput, _a2 ...request.Option) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UpdateTableReplicaAutoScalingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateTableReplicaAutoScalingInput, ...request.Option) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateTableReplicaAutoScalingInput, ...request.Option) *dynamodb.UpdateTableReplicaAutoScalingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateTableReplicaAutoScalingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateTableReplicaAutoScalingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTableReplicaAutoScalingWithContext'
type MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call struct {
	*mock.Call
}

// UpdateTableReplicaAutoScalingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateTableReplicaAutoScalingInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UpdateTableReplicaAutoScalingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call {
	return &MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call{Call: _e.mock.On("UpdateTableReplicaAutoScalingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateTableReplicaAutoScalingInput, _a2 ...request.Option)) *MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateTableReplicaAutoScalingInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call) Return(_a0 *dynamodb.UpdateTableReplicaAutoScalingOutput, _a1 error) *MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateTableReplicaAutoScalingInput, ...request.Option) (*dynamodb.UpdateTableReplicaAutoScalingOutput, error)) *MockDynamoDBI_UpdateTableReplicaAutoScalingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTableRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateTableRequest(_a0 *dynamodb.UpdateTableInput) (*request.Request, *dynamodb.UpdateTableOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UpdateTableOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableInput) (*request.Request, *dynamodb.UpdateTableOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTableInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateTableInput) *dynamodb.UpdateTableOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UpdateTableOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTableRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTableRequest'
type MockDynamoDBI_UpdateTableRequest_Call struct {
	*mock.Call
}

// UpdateTableRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateTableInput
func (_e *MockDynamoDBI_Expecter) UpdateTableRequest(_a0 interface{}) *MockDynamoDBI_UpdateTableRequest_Call {
	return &MockDynamoDBI_UpdateTableRequest_Call{Call: _e.mock.On("UpdateTableRequest", _a0)}
}

func (_c *MockDynamoDBI_UpdateTableRequest_Call) Run(run func(_a0 *dynamodb.UpdateTableInput)) *MockDynamoDBI_UpdateTableRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTableRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UpdateTableOutput) *MockDynamoDBI_UpdateTableRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTableRequest_Call) RunAndReturn(run func(*dynamodb.UpdateTableInput) (*request.Request, *dynamodb.UpdateTableOutput)) *MockDynamoDBI_UpdateTableRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTableWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UpdateTableWithContext(_a0 context.Context, _a1 *dynamodb.UpdateTableInput, _a2 ...request.Option) (*dynamodb.UpdateTableOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UpdateTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateTableInput, ...request.Option) (*dynamodb.UpdateTableOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateTableInput, ...request.Option) *dynamodb.UpdateTableOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateTableInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTableWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTableWithContext'
type MockDynamoDBI_UpdateTableWithContext_Call struct {
	*mock.Call
}

// UpdateTableWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateTableInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UpdateTableWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UpdateTableWithContext_Call {
	return &MockDynamoDBI_UpdateTableWithContext_Call{Call: _e.mock.On("UpdateTableWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UpdateTableWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateTableInput, _a2 ...request.Option)) *MockDynamoDBI_UpdateTableWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTableWithContext_Call) Return(_a0 *dynamodb.UpdateTableOutput, _a1 error) *MockDynamoDBI_UpdateTableWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTableWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateTableInput, ...request.Option) (*dynamodb.UpdateTableOutput, error)) *MockDynamoDBI_UpdateTableWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTimeToLive provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateTimeToLive(_a0 *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *dynamodb.UpdateTimeToLiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTimeToLiveInput) *dynamodb.UpdateTimeToLiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateTimeToLiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateTimeToLiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTimeToLive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTimeToLive'
type MockDynamoDBI_UpdateTimeToLive_Call struct {
	*mock.Call
}

// UpdateTimeToLive is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateTimeToLiveInput
func (_e *MockDynamoDBI_Expecter) UpdateTimeToLive(_a0 interface{}) *MockDynamoDBI_UpdateTimeToLive_Call {
	return &MockDynamoDBI_UpdateTimeToLive_Call{Call: _e.mock.On("UpdateTimeToLive", _a0)}
}

func (_c *MockDynamoDBI_UpdateTimeToLive_Call) Run(run func(_a0 *dynamodb.UpdateTimeToLiveInput)) *MockDynamoDBI_UpdateTimeToLive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateTimeToLiveInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTimeToLive_Call) Return(_a0 *dynamodb.UpdateTimeToLiveOutput, _a1 error) *MockDynamoDBI_UpdateTimeToLive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTimeToLive_Call) RunAndReturn(run func(*dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error)) *MockDynamoDBI_UpdateTimeToLive_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTimeToLiveRequest provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) UpdateTimeToLiveRequest(_a0 *dynamodb.UpdateTimeToLiveInput) (*request.Request, *dynamodb.UpdateTimeToLiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *dynamodb.UpdateTimeToLiveOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTimeToLiveInput) (*request.Request, *dynamodb.UpdateTimeToLiveOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dynamodb.UpdateTimeToLiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*dynamodb.UpdateTimeToLiveInput) *dynamodb.UpdateTimeToLiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dynamodb.UpdateTimeToLiveOutput)
		}
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTimeToLiveRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTimeToLiveRequest'
type MockDynamoDBI_UpdateTimeToLiveRequest_Call struct {
	*mock.Call
}

// UpdateTimeToLiveRequest is a helper method to define mock.On call
//   - _a0 *dynamodb.UpdateTimeToLiveInput
func (_e *MockDynamoDBI_Expecter) UpdateTimeToLiveRequest(_a0 interface{}) *MockDynamoDBI_UpdateTimeToLiveRequest_Call {
	return &MockDynamoDBI_UpdateTimeToLiveRequest_Call{Call: _e.mock.On("UpdateTimeToLiveRequest", _a0)}
}

func (_c *MockDynamoDBI_UpdateTimeToLiveRequest_Call) Run(run func(_a0 *dynamodb.UpdateTimeToLiveInput)) *MockDynamoDBI_UpdateTimeToLiveRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.UpdateTimeToLiveInput))
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTimeToLiveRequest_Call) Return(_a0 *request.Request, _a1 *dynamodb.UpdateTimeToLiveOutput) *MockDynamoDBI_UpdateTimeToLiveRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTimeToLiveRequest_Call) RunAndReturn(run func(*dynamodb.UpdateTimeToLiveInput) (*request.Request, *dynamodb.UpdateTimeToLiveOutput)) *MockDynamoDBI_UpdateTimeToLiveRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTimeToLiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) UpdateTimeToLiveWithContext(_a0 context.Context, _a1 *dynamodb.UpdateTimeToLiveInput, _a2 ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.UpdateTimeToLiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateTimeToLiveInput, ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateTimeToLiveInput, ...request.Option) *dynamodb.UpdateTimeToLiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateTimeToLiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateTimeToLiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBI_UpdateTimeToLiveWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTimeToLiveWithContext'
type MockDynamoDBI_UpdateTimeToLiveWithContext_Call struct {
	*mock.Call
}

// UpdateTimeToLiveWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateTimeToLiveInput
//   - _a2 ...request.Option
func (_e *MockDynamoDBI_Expecter) UpdateTimeToLiveWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_UpdateTimeToLiveWithContext_Call {
	return &MockDynamoDBI_UpdateTimeToLiveWithContext_Call{Call: _e.mock.On("UpdateTimeToLiveWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_UpdateTimeToLiveWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateTimeToLiveInput, _a2 ...request.Option)) *MockDynamoDBI_UpdateTimeToLiveWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateTimeToLiveInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_UpdateTimeToLiveWithContext_Call) Return(_a0 *dynamodb.UpdateTimeToLiveOutput, _a1 error) *MockDynamoDBI_UpdateTimeToLiveWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBI_UpdateTimeToLiveWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateTimeToLiveInput, ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error)) *MockDynamoDBI_UpdateTimeToLiveWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilTableExists provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) WaitUntilTableExists(_a0 *dynamodb.DescribeTableInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_WaitUntilTableExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilTableExists'
type MockDynamoDBI_WaitUntilTableExists_Call struct {
	*mock.Call
}

// WaitUntilTableExists is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeTableInput
func (_e *MockDynamoDBI_Expecter) WaitUntilTableExists(_a0 interface{}) *MockDynamoDBI_WaitUntilTableExists_Call {
	return &MockDynamoDBI_WaitUntilTableExists_Call{Call: _e.mock.On("WaitUntilTableExists", _a0)}
}

func (_c *MockDynamoDBI_WaitUntilTableExists_Call) Run(run func(_a0 *dynamodb.DescribeTableInput)) *MockDynamoDBI_WaitUntilTableExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_WaitUntilTableExists_Call) Return(_a0 error) *MockDynamoDBI_WaitUntilTableExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_WaitUntilTableExists_Call) RunAndReturn(run func(*dynamodb.DescribeTableInput) error) *MockDynamoDBI_WaitUntilTableExists_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilTableExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) WaitUntilTableExistsWithContext(_a0 context.Context, _a1 *dynamodb.DescribeTableInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTableInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_WaitUntilTableExistsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilTableExistsWithContext'
type MockDynamoDBI_WaitUntilTableExistsWithContext_Call struct {
	*mock.Call
}

// WaitUntilTableExistsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeTableInput
//   - _a2 ...request.WaiterOption
func (_e *MockDynamoDBI_Expecter) WaitUntilTableExistsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_WaitUntilTableExistsWithContext_Call {
	return &MockDynamoDBI_WaitUntilTableExistsWithContext_Call{Call: _e.mock.On("WaitUntilTableExistsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_WaitUntilTableExistsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeTableInput, _a2 ...request.WaiterOption)) *MockDynamoDBI_WaitUntilTableExistsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_WaitUntilTableExistsWithContext_Call) Return(_a0 error) *MockDynamoDBI_WaitUntilTableExistsWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_WaitUntilTableExistsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeTableInput, ...request.WaiterOption) error) *MockDynamoDBI_WaitUntilTableExistsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilTableNotExists provides a mock function with given fields: _a0
func (_m *MockDynamoDBI) WaitUntilTableNotExists(_a0 *dynamodb.DescribeTableInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodb.DescribeTableInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_WaitUntilTableNotExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilTableNotExists'
type MockDynamoDBI_WaitUntilTableNotExists_Call struct {
	*mock.Call
}

// WaitUntilTableNotExists is a helper method to define mock.On call
//   - _a0 *dynamodb.DescribeTableInput
func (_e *MockDynamoDBI_Expecter) WaitUntilTableNotExists(_a0 interface{}) *MockDynamoDBI_WaitUntilTableNotExists_Call {
	return &MockDynamoDBI_WaitUntilTableNotExists_Call{Call: _e.mock.On("WaitUntilTableNotExists", _a0)}
}

func (_c *MockDynamoDBI_WaitUntilTableNotExists_Call) Run(run func(_a0 *dynamodb.DescribeTableInput)) *MockDynamoDBI_WaitUntilTableNotExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dynamodb.DescribeTableInput))
	})
	return _c
}

func (_c *MockDynamoDBI_WaitUntilTableNotExists_Call) Return(_a0 error) *MockDynamoDBI_WaitUntilTableNotExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_WaitUntilTableNotExists_Call) RunAndReturn(run func(*dynamodb.DescribeTableInput) error) *MockDynamoDBI_WaitUntilTableNotExists_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilTableNotExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBI) WaitUntilTableNotExistsWithContext(_a0 context.Context, _a1 *dynamodb.DescribeTableInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DescribeTableInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilTableNotExistsWithContext'
type MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call struct {
	*mock.Call
}

// WaitUntilTableNotExistsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DescribeTableInput
//   - _a2 ...request.WaiterOption
func (_e *MockDynamoDBI_Expecter) WaitUntilTableNotExistsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call {
	return &MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call{Call: _e.mock.On("WaitUntilTableNotExistsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DescribeTableInput, _a2 ...request.WaiterOption)) *MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DescribeTableInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call) Return(_a0 error) *MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call) RunAndReturn(run func(context.Context, *dynamodb.DescribeTableInput, ...request.WaiterOption) error) *MockDynamoDBI_WaitUntilTableNotExistsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDynamoDBI interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDynamoDBI creates a new instance of MockDynamoDBI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDynamoDBI(t mockConstructorTestingTNewMockDynamoDBI) *MockDynamoDBI {
	mock := &MockDynamoDBI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
