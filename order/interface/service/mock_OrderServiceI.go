// Code generated by mockery v2.20.0. DO NOT EDIT.

package service

import (
	entities "github.com/facuellarg/order/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderServiceI is an autogenerated mock type for the OrderServiceI type
type MockOrderServiceI struct {
	mock.Mock
}

type MockOrderServiceI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderServiceI) EXPECT() *MockOrderServiceI_Expecter {
	return &MockOrderServiceI_Expecter{mock: &_m.Mock}
}

// SaveOrder provides a mock function with given fields: _a0
func (_m *MockOrderServiceI) SaveOrder(_a0 entities.CreateOrderRequest) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.CreateOrderRequest) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.CreateOrderRequest) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entities.CreateOrderRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderServiceI_SaveOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOrder'
type MockOrderServiceI_SaveOrder_Call struct {
	*mock.Call
}

// SaveOrder is a helper method to define mock.On call
//   - _a0 entities.CreateOrderRequest
func (_e *MockOrderServiceI_Expecter) SaveOrder(_a0 interface{}) *MockOrderServiceI_SaveOrder_Call {
	return &MockOrderServiceI_SaveOrder_Call{Call: _e.mock.On("SaveOrder", _a0)}
}

func (_c *MockOrderServiceI_SaveOrder_Call) Run(run func(_a0 entities.CreateOrderRequest)) *MockOrderServiceI_SaveOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.CreateOrderRequest))
	})
	return _c
}

func (_c *MockOrderServiceI_SaveOrder_Call) Return(_a0 string, _a1 error) *MockOrderServiceI_SaveOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderServiceI_SaveOrder_Call) RunAndReturn(run func(entities.CreateOrderRequest) (string, error)) *MockOrderServiceI_SaveOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusOrder provides a mock function with given fields: _a0
func (_m *MockOrderServiceI) UpdateStatusOrder(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderServiceI_UpdateStatusOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusOrder'
type MockOrderServiceI_UpdateStatusOrder_Call struct {
	*mock.Call
}

// UpdateStatusOrder is a helper method to define mock.On call
//   - _a0 string
func (_e *MockOrderServiceI_Expecter) UpdateStatusOrder(_a0 interface{}) *MockOrderServiceI_UpdateStatusOrder_Call {
	return &MockOrderServiceI_UpdateStatusOrder_Call{Call: _e.mock.On("UpdateStatusOrder", _a0)}
}

func (_c *MockOrderServiceI_UpdateStatusOrder_Call) Run(run func(_a0 string)) *MockOrderServiceI_UpdateStatusOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrderServiceI_UpdateStatusOrder_Call) Return(_a0 error) *MockOrderServiceI_UpdateStatusOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderServiceI_UpdateStatusOrder_Call) RunAndReturn(run func(string) error) *MockOrderServiceI_UpdateStatusOrder_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockOrderServiceI interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOrderServiceI creates a new instance of MockOrderServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOrderServiceI(t mockConstructorTestingTNewMockOrderServiceI) *MockOrderServiceI {
	mock := &MockOrderServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
