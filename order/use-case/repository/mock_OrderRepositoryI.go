// Code generated by mockery v2.20.0. DO NOT EDIT.

package repository

import (
	entities "github.com/facuellarg/order/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderRepositoryI is an autogenerated mock type for the OrderRepositoryI type
type MockOrderRepositoryI struct {
	mock.Mock
}

type MockOrderRepositoryI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepositoryI) EXPECT() *MockOrderRepositoryI_Expecter {
	return &MockOrderRepositoryI_Expecter{mock: &_m.Mock}
}

// SaveOrder provides a mock function with given fields: _a0
func (_m *MockOrderRepositoryI) SaveOrder(_a0 entities.Order) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Order) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.Order) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entities.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepositoryI_SaveOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOrder'
type MockOrderRepositoryI_SaveOrder_Call struct {
	*mock.Call
}

// SaveOrder is a helper method to define mock.On call
//   - _a0 entities.Order
func (_e *MockOrderRepositoryI_Expecter) SaveOrder(_a0 interface{}) *MockOrderRepositoryI_SaveOrder_Call {
	return &MockOrderRepositoryI_SaveOrder_Call{Call: _e.mock.On("SaveOrder", _a0)}
}

func (_c *MockOrderRepositoryI_SaveOrder_Call) Run(run func(_a0 entities.Order)) *MockOrderRepositoryI_SaveOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Order))
	})
	return _c
}

func (_c *MockOrderRepositoryI_SaveOrder_Call) Return(_a0 string, _a1 error) *MockOrderRepositoryI_SaveOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepositoryI_SaveOrder_Call) RunAndReturn(run func(entities.Order) (string, error)) *MockOrderRepositoryI_SaveOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: _a0, _a1
func (_m *MockOrderRepositoryI) UpdateStatus(_a0 string, _a1 entities.OrderStatus) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entities.OrderStatus) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderRepositoryI_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockOrderRepositoryI_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - _a0 string
//   - _a1 entities.OrderStatus
func (_e *MockOrderRepositoryI_Expecter) UpdateStatus(_a0 interface{}, _a1 interface{}) *MockOrderRepositoryI_UpdateStatus_Call {
	return &MockOrderRepositoryI_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", _a0, _a1)}
}

func (_c *MockOrderRepositoryI_UpdateStatus_Call) Run(run func(_a0 string, _a1 entities.OrderStatus)) *MockOrderRepositoryI_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(entities.OrderStatus))
	})
	return _c
}

func (_c *MockOrderRepositoryI_UpdateStatus_Call) Return(_a0 error) *MockOrderRepositoryI_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderRepositoryI_UpdateStatus_Call) RunAndReturn(run func(string, entities.OrderStatus) error) *MockOrderRepositoryI_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockOrderRepositoryI interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockOrderRepositoryI creates a new instance of MockOrderRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOrderRepositoryI(t mockConstructorTestingTNewMockOrderRepositoryI) *MockOrderRepositoryI {
	mock := &MockOrderRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
